<Module xmlns="https://niap-ccevs.org/cc/v1" xmlns:h="http://www.w3.org/1999/xhtml" xmlns:sec="https://niap-ccevs.org/cc/v1/section" name="PP-Module for File Encryption" target-product="File Encryption" target-products="File Encryption">
  <PPReference>
    <ReferenceTable>
      <PPVersion>2.0</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2025-04-29</PPPubDate>
      <Keywords>file encryption; encryption</Keywords>
    </ReferenceTable>
  </PPReference>
  <RevisionHistory>
    <entry>
      <version>1.0</version>
      <date>2019-07-25</date>
      <subject>Initial Release</subject>
    </entry>
    <entry>
      <version>2.0</version>
      <date>2025-01-31</date>
      <subject>Update to CC:2022</subject>
    </entry>
  </RevisionHistory>
  <release-notes><h:h3>TDs Applied</h:h3></release-notes><pp-preferences><audit-events-in-sfrs/></pp-preferences>
  <sec:Introduction>
    <sec:Overview> 
     The scope of the File Encryption PP-Module is to describe the security functionality of a file encryption 
	    product in terms of [CC] and to define functional and assurance requirements for such products. 
	    This PP-Module is intended for use with the following Base-PP: <h:ul><h:br/><h:li>Application Software Protection Profile, Version 2.0</h:li></h:ul><h:br/>   
      This Base-PP is valid because a file encryption product is a 3rd party application or application 
      included with a operating system.<h:br/><h:br/>
    
      File encryption is the process of encrypting individual files or sets of
      files (or volumes, or containers, etc.) on an end user device and permitting access to the
      encrypted data only after proper authentication is provided. Encryption products that
      conform to this PP-Module must render information inaccessible to anyone (or, in the case of other
      software on the machine, anything) that does not have the proper authentication credential.  
      The encrypted files may be on a local machine or may be sent to other devices.<h:br/><h:br/>
      
      The foremost security objective of file
      encryption is to force an adversary to perform a cryptographic exhaust against a
      prohibitively large key space. Technology is changing at a rapid rate and the
      definition of mobile devices and traditional laptop/PC devices is quickly merging.
      Requirements can diverge slightly for Mobile vs Laptop/PC and the Evaluation Activities will
      describe any differences. Either of these use cases may be an enterprise managed file encryption client. 
      Some of the security functionality may be provided by the OE.
      The vendor is required to provide configuration guidance (AGD_PRE, AGD_OPE) to correctly install and 
      administer the TOE for every operational environment supported.<h:br/><h:br/>
      
      The data that is to be secured by the encryption product is encrypted using a File
      Encryption Key (FEK). A file encryptor may have zero or more Key Encryption Keys (KEKs) that
      protect (encrypt) the FEK. The number of keys and the types of keys may vary, but the design
      should follow one of the following models:<h:br/><h:br/><h:ol><h:li>Condition a Password/Passphrase directly into a FEK</h:li> <h:li>Condition a Password/Passphrase into a KEK that is used to encrypt the randomly
          generated FEK directly or through a chaining of more than one KEK (these KEKs would be
          randomly generated).</h:li> <h:li>Use a software certificate or an external token to protect the FEK.</h:li></h:ol> From a terminology standpoint, a KEK is either a symmetric key or an
      asymmetric key pair, and is used for both encryption and decryption of the
      FEK. If a distinction needs to be made between the public key (which encrypts the FEK) and
      the private key (which decrypts the FEK), this is done in the requirements and the evaluation
      activities.<h:br/><h:br/> 

      The TOE may be capable of supporting multiple users with different authorization factors, such that different users
      are able to use the same platform and not be able to read each other's encrypted files. The
      TOE may also support the ability for users to share an encrypted file without sharing an
      authorization factor, but this is not required. In order to claim this capability, the TOE must allow
      sharing of at least one encrypted resource among different users of the TOE who possess
      different authorization factors (e.g., two different smart cards, two different passwords, one
      using a password and another using a smart card). If this capability is supported, then the ST
      author adds FIA_FCT_EXT.1.1.<h:br/><h:br/><h:b>Authorization</h:b><h:br/> One or more authorization factors must be established before data can
      be encrypted. This authorization factor(s) must be presented to the file encryption product
      in order for the user to request that the product decrypt the data. Authorization factors
      may be uniquely associated with individual users or may be associated with a community of
      users. The TOE is not required to support multiple types of authorization factors (e.g.,
      both passphrases and external authorization factors). If the ST author defines additional
      authorization factors, they must be fully documented and cannot diminish the strength of the
      passphrase and/or external token authorization factors. <h:br/><h:br/>
      The password/passphrase authorization factors must be conditioned such that they are
      at least the same size (bit length) as the key they are protecting. 
      While this PP-Module does not dictate how these authentication factors are created, a
      good operational practice is for an administrator to generate the password or passphrase to
      ensure sufficient entropy.  Passphrases are preferred over passwords, since it is easier for users to remember and type in a sequence of
      words than recall a password and type in a long string of random characters.<h:br/><h:br/><h:b>Administration</h:b><h:br/> The base requirements of the TOE do not require the TOE to maintain an
      administrative role. Typically, administrators possess privilege to invoke
      functionality on the TOE that is not available to general users. For stand alone file encryption
      products, however, once the product is installed there should be little need for
      administrative involvement.  For enterprise managed file encryption products, the TOE may be remotely administered. <h:br/><h:br/><h:b>Data Authentication (optional)</h:b><h:br/> Because modification of ciphertext data
      for certain modes of encryption will enable unidentified plaintext manipulation, care must
      be taken by the TOE to mitigate against forged or maliciously modified ciphertext data. The
      PP-Module defines requirements for how the TOE must provide data authentication services, allowing
      the TOE to implement authenticated block cipher, keyed hash function or asymmetric signing
      features. Depending on the implementation, the TOE will be responsible for meeting at least
      one of the aforementioned requirements. In all cases, unsuccessful authentication of the
      data should not allow the user to see the decrypted ciphertext and notification should be
      provided to the user if such an event were to occur.<h:br/><h:br/> A keyed hashing service may also
      be used to accomplish data authentication. This will involve using an approved keyed hashing
      service in accordance with FCS_COP.1/KeyedHash and proper protection of the File Authentication Key
      (FAK); the FAK being the secret value used as input to the keyed hash function. FAKs should
      be numerically different from the FEK, but will be protected in all of the same manners as
      the FEK. The primary requirement dictating implementation of data authentication using a
      keyed hash function is FDP_AUT_EXT.2.<h:br/><h:br/> Lastly, asymmetric signing in conjunction with a
      secure hash function may be used to authenticate the data. The implementation must use an
      approved signing algorithm in accordance with FCS_COP.1/Sig (from the [AppPP]) and an approved secure hashing function in accordance with
      FCS_COP.1/Hash (from the [AppPP]). The primary requirement addressing data
      authentication via asymmetric signing is FDP_AUT_EXT.3. <h:br/><h:br/><h:b>The TOE and Its Supporting Environment:</h:b><h:br/>
      Since the TOE is purely a software solution, it must rely on the TOE Operational Environment (system
      hardware, firmware, and operating system) for its execution domain and its proper usage. The
      vendor is expected to provide sufficient installation and configuration instructions (for
      each platform listed in the ST) to identify Operational Environment(s) with the necessary
      features and to provide instructions for how to configure it correctly and securely. <h:br/><h:br/>

      The PP-Module contains requirements (Section 5 that must be met by either the TOE or the platform
      on which it operates. A "platform" is defined as a separate entity whose functions may be
      used by the TOE, but is not part of the TOE. A third-party library used by the TOE is not
      considered part of the TOE's "platform", but (for instance) cryptographic functionality that
      is built into an Operating System on which the TOE executes can be considered part of the
      platform. Requirements that allow for the platform to provide functionality have selections 
      that identify where it is acceptable.<h:br/><h:br/> 

      Likewise, an external entity (such as a smart card) that performs
      cryptographic operations with respect to the FEK would also be considered a part of the "TOE
      Platform".
      
      <h:br/><h:br/> The ST author will make the appropriate selection based on where
      that element is implemented. It is allowable for some elements in a component to be
      implemented by the TOE, while other elements in that same component may be implemented by
      the platform; in these cases, further guidance is given in the application notes and
      Supporting Documentation.<h:br/><h:br/> In some cases, the TOE vendor will have to provide specific
      configuration guidance for the Operational Environment to enable the TOE to meet its
      security objectives. These include:<h:br/> For non-mobile systems:<h:br/><h:ul><h:li>Instructions for how to configure the operational environment so that the system
          powers down completely after a period of user inactivity for every operating system that
          the product supports.</h:li> <h:li>Instructions for how to disable power managed state (e.g., hibernate/sleep)
          capabilities.</h:li></h:ul> For mobile systems:<h:br/><h:ul><h:li>Instructions for how to configure the operational environment to provide necessary
          behavior in support of TOE functionality when transition to a locked state after
          inactivity period and manually engaging the lock functionality.</h:li></h:ul> It should be noted that if the TOE possesses the capability to correctly protect
      information in one or more of an underlying platform's power managed modes, they can use the
      FDP_PM_EXT.1 requirement in Appendix A.<h:br/><h:br/> Authorized users of the TOE are those users
      possessing valid authorization factors for the TOE. While some of these functions specified
      in the PP-Module might be considered "administrative" functions for other types of TOEs, for file
      encryption products it is the expectation that all of these functions can be performed by
      the end user of the software.
    </sec:Overview>
    <tech-terms>
      <term full="Administrator">Authorized Users with higher privileges and typically handle configuration and management functions, such as configuring and 
        updating the TOE.</term>
      <term full="Authorization factor" abbr="AF">A value submitted by the user, present on the host, or present on a separate protected hardware physical 
        device used to establish that the user (and potentially the host) is in the community authorized to use the TOE. The authorization factors are used
        to generate the KEK. Note that these AFs are not used to establish the particular identity of the user.</term>
      <term full="Authorized User">A user who has been provided Authorization factors by the administrator to
              use the TOE.</term>
      <term full="Data Encryption">The process of encrypting all user data written to volatile memory.</term>
      <term full="Deterministic Random Bit Generator" abbr="DRBG">A cryptographic algorithm that produces a sequence of bits from a secret
              initial seed value. Without knowledge of the seed value, the output sequence should be
              unpredictable up to the security level of the DRBG.</term>
      <term full="Entropy Source">This cryptographic function provides a seed for a random bit generator by
              accumulating the outputs from one or more noise sources. The functionality includes a
              measure of the minimum work required to guess a given output and tests to ensure that
              the noise sources are operating properly.</term>
      <term full="File/Set of files">The user data that is selected to be encrypted, which can include
              individual file encryption (with a FEK per file) or a set of files encrypted with a
              single FEK.</term>
      <term full="File Authentication Key" abbr="FAK">The secret value used as input when a keyed hash function is used to
              perform data authentication.</term>
      <term full="File Encryption Key" abbr="FEK">The key that is used by the encryption algorithm to encrypt the selected
              user data on the host machine.</term>
      <term full="Key Chaining">The method of using multiple layers of encryption keys to protect data. 
              A top layer key encrypts a lower layer key which encrypts the data; this method can have any number of layers.</term>
      <term full="Key Encryption Key" abbr="KEK">The key that is used to encrypt another key.</term>
      <term full="Keying Material">The KEK, FEK, authorization factors and random numbers or any other values
              from which keys are derived.</term>
      <term full="Key Sanitization">A method of sanitizing encrypted data by securely overwriting the key, as described in the key destruction requirement, that was encrypting the data.</term>
      <term full="Noise Source">The component of an RBG that contains the non-deterministic,
              entropy-producing activity.</term>
      <term full="Operational Environment">Hardware and software that are outside the TOE boundary that support the
              TOE functionality and security policy, including the platform, its firmware, and
              the operating system.</term>
      <term full="Password">A short string of characters used for authorization to the data on the
              device.</term>
      <term full="Passphrase">A string of words that may be used for authorization to the data
              on the device.</term>
      <term full="Primary Key Chain">The direct key chain from the authorization factor to the FEK.</term>
      <term full="Random Bit Generator" abbr="RBG">A cryptographic function composed of an entropy source and DRBG that is
              invoked for random bits needed to produce keying material.</term>
      <term full="Sensitive Data">Any data of which the compromise with respect to loss, misuse, or
              unauthorized access to or modification of could adversely affect the interest of the
              TOE user.</term>
      <term full="Shutdown">Power down or unintentional loss of power of the TOE or platform.</term>
      <term full="Supplemental Key Chain">Other key chains that add protection or functionality without compromising the security of the primary key chain.</term>
      <term full="System files">Files that reside on the host machine that are used in the operation of
              the file encryption software.</term>
      <term full="Temporary File">A file created by an application for short term storage of sensitive data.</term>
      <term full="Trusted Host">Source/destination host configured and maintained to provide the TOE with
              appropriate IT security commensurate with the value of the user data protected by the
              TOE.</term>
      <term full="Unauthorized User">A user who has not been authorized to use the TOE and decrypt encrypted
              user data.</term>
      <term full="User Data">All data that originate on the host, or is derived from data that
              originate on the host, excluding system files and signed firmware updates from the TOE
              manufacturer.</term>
      <term full="Volatile memory">Memory that loses its content when power is turned off.</term>
      <term full="Zeroize">This term is used to make a distinction between dereferencing a memory
              location and actively overwriting it with a constant. Keying material needs to be
              overwritten when it is no longer needed</term>
    </tech-terms>
    <section title="Compliant Targets of Evaluation" id="TOEdescription">
      
      This PP-Module specifically
      addresses encryption of a set of data. This PP-Module addresses the primary threat that an
      unauthorized user will obtain access to a host machine containing encrypted information and be
      able to extract the sensitive data through the process of decryption. The Target of Evaluation
      (TOE) defined in this PP-Module is an encryption product that will inherently encrypt all of that
      data that the user selects to encrypt. For ease of explanation, "file" will frequently be used
      to refer to the object that is encrypted (however, it could be any number of things - folders,
      volumes, containers, etc.).<h:br/><h:br/>
      <sec:TOE_Boundary>
          The application, which consists of the software provided by its vendor,
          is installed onto the platform(s) it operates on. It executes on the platform, which
          may be an operating system, hardware environment, 
          a software based execution environment, 
          or some combination of these. Those platforms may themselves run within other
          environments, such as virtual machines or operating systems, that completely abstract away the underlying hardware
          from the application. The TOE is not accountable for security functionality that is implemented by 
          platform layers that are abstracted away.
          Some evaluation activities are specific to the particular platform
          on which the application runs, in order to provide precision and
          repeatability. The only platforms currently recognized by [AppPP] and this module are those specified in SFR Evaluation Activities.
          To test on a platform for which there are no EAs, a Vendor should contact NIAP with recommended EAs.
          NIAP will determine if the proposed platform is appropriate for the PP and accept, reject,
          or develop EAs as necessary in coordination with the technical community.<h:br/><h:br/>
        	
          The TOE includes 
          any software in the application installation package, even those pieces that may 
          extend or modify the functionality of the underlying platform, such as kernel drivers.  
          Some platforms come bundled with file encryption product and these too
          should be considered subject to the requirements defined in this
          document although the expectation of formal Common Criteria evaluation
          depends upon the national scheme.  and other firmware, the operating system kernel,
          and other systems software (and drivers) provided as part of the
          platform are outside the scope of this document.
      </sec:TOE_Boundary>
    </section>
    <sec:Use_Cases>
      <usecases>
        <usecase title="Unmanaged Endpoint" id="usecase1">
          <description>The traditional ability to encrypt files without external management and power down the machine and know the data is securely protected.</description>
        </usecase>
        <usecase title="Managed Endpoint" id="usecase2">
          <description>The traditional ability to encrypt files and power down the machine and know the data is securely protected, while communicating with an Enterprise Management server.</description>
        </usecase>
        <usecase title="Encrypted Distribution" id="usecase3">
          <description>The ability to encrypt a file on a machine and then send the encrypted file securely using a non-encrypted data in transit method.</description>
        </usecase>
      </usecases>
    </sec:Use_Cases>
  </sec:Introduction>
  <sec:Conformance_Claims boilerplate="no">
    <CClaimsInfo cc-version="cc-2022r1" cc-approach="direct-rationale">
      <cc-st-conf>exact</cc-st-conf>
      <cc-pt2-conf>extended</cc-pt2-conf>
      <cc-pt3-conf>extended</cc-pt3-conf>
      <cc-pp-conf/>
      <cc-pp-config-with>
        <Mod-cc-ref>PP-Module for VPN Client, Version 2.3</Mod-cc-ref>
        <Mod-cc-ref>PP-Module for VPN Client, Version 2.4</Mod-cc-ref>
        <Mod-cc-ref>PP-Module for File Encryption Enterprise Management, Version 1.0</Mod-cc-ref>
      </cc-pp-config-with>
      <cc-pkg-claim/>
    </CClaimsInfo>
  </sec:Conformance_Claims>
  <!-- 3.0 Security Problem Definition-->
  <sec:Security_Problem_Definition>
    
  The primary asset that is being protected
    is the sensitive user data stored on a system. The threat model thus focuses on a host machine
    that has been compromised by an unauthorized user. This section addresses threats to the TOE
    only. 

    
    <!-- 3.1 Threats -->
    <sec:Threats>
      A threat consists of a threat agent, an asset, and
      an adverse action of that threat agent on that asset. The model in this PP-Module only addresses
      risks that arise from the host machine being compromised by an unauthorized user.<h:br/><h:br/>

      For this PP-Module, the TOE is not expected to defend against all threats related to malicious software
      that may reside in user data files. For instance, the TOE is not responsible for detecting
      malware in the data selected by the user for encryption (that is a responsibility of the host
      environment). Once the file encryption product is operational in a host system, the threats
      against the data from potentially malicious software on the host are also not in the threat
      model of this PP-Module. For example, there are no requirements in this PP-Module addressing a malicious
      host capturing a password-based authorization factor, nor a malicious process reading the
      memory of an application program that is operating on a decrypted file.<h:br/><h:br/> 

      Note that this PP-Module
      does not repeat the threats identified in the [AppPP], though they all
      apply given the conformance and hence dependence of this PP-Module on the [AppPP].
      <h:br/><h:br/>

      Note also that while the [AppPP] contains only threats to the ability of
      the TOE to provide its security functions, this PP-Module focuses on threats to resources in the
      operational environment. Together the threats of [AppPP] and those defined in this PP-Module define
      the comprehensive set of security threats addressed by a file encryption TOE. 
      <threats><threat name="T.KEYING_MATERIAL_COMPROMISE"><description><h:b>Compromise of Keying Material:</h:b> An attacker exploits a weakness in the random number generation,             plaintext keys, and other keying material to decrypt an encrypted file. </description><!-- New mapping to build updated threat mapping table. --><addressed-by>FCS_CKM.6</addressed-by><rationale>Mitigates the threat by destroying keys and key material when not needed.</rationale><addressed-by>FPT_KYP_EXT.1</addressed-by><rationale>Mitigates the threat by protecting keys stored on non-volatile memory.</rationale></threat><threat name="T.KEYSPACE_EXHAUST"><description><h:b>Brute Force Attack:</h:b> An attacker is able to brute force the keyspace of the algorithms used to force disclosure of sensitive data,            allowing access to secure information.          </description><!-- New mapping to build updated threat mapping table. --><addressed-by>FCS_CKM_EXT.2</addressed-by><rationale>Mitigates the threat by generating FEKs in a secure manner.</rationale><addressed-by>FCS_CKM_EXT.3 (selection-based)</addressed-by><rationale>Mitigates the threat by using or generating secure KEKs.</rationale><addressed-by>FCS_CKM_EXT.6 (selection-based)</addressed-by><rationale>Mitigates the threat by conditioning a password or passphrase before using it for key-related functions.</rationale><addressed-by>FCS_COP.1/KE (selection-based)</addressed-by><rationale>Mitigates the threat by encrypting keys using a specified secure algorithm.</rationale><addressed-by>FCS_COP.1/KT (selection-based)</addressed-by><rationale>Mitigates the threat by transporting keys using a specified secure algorithm.</rationale><addressed-by>FCS_COP.1/KW (selection-based)</addressed-by><rationale>Mitigates the threat by wrapping keys using a specified secure algorithm.</rationale><addressed-by>FCS_KYC_EXT.1</addressed-by><rationale>Mitigates the threat by maintaining and storing secure key chains.</rationale><addressed-by>FCS_SMC_EXT.1 (selection-based)</addressed-by><rationale>Mitigates the threat by combining submasks using a secure method.</rationale><addressed-by>FCS_VAL_EXT.1</addressed-by><rationale>Mitigates the threat by using validation elements that are generated or protected in a secure manner.</rationale></threat><threat name="T.MANAGEMENT_ACCESS"><description><h:b>Management Access:</h:b> An authorized user may perform sensitive management functions without proper permissions or a legitimate user may lack the ability to perform            necessary security operations due to a lack of supported management functionality.</description><!-- New mapping to build updated threat mapping table. --><addressed-by>FMT_SMF.1/FE</addressed-by><rationale>Mitigates the threat by enumerating and protecting management functions.</rationale></threat><threat name="T.PLAINTEXT_COMPROMISE"><description><h:b>Plaintext Compromise:</h:b> An attacker is able to uncover plaintext remains with forensic tools, allowing access            to secure information.          </description><!-- New mapping to build updated threat mapping table. --><addressed-by>FDP_PRT_EXT.1</addressed-by><rationale>Mitigates the threat by encrypting a file or files.</rationale><addressed-by>FDP_PRT_EXT.2</addressed-by><rationale>Mitigates the threat by destroying original plaintext data is once the original data is decrypted or encrypted.</rationale><addressed-by>FDP_PRT_EXT.3 (optional)</addressed-by><rationale>Mitigates the threat by destroying or encrypting temporary files when decrypting or encryption of files are completed.</rationale></threat><threat name="T.UNAUTHORIZED_DATA_ACCESS"><description><h:b>Unauthorized Data Access:</h:b> An attacker that is not permitted to decrypt files             or has no access obtains access to an account and uses forensic tools for examination.</description><!-- New mapping to build updated threat mapping table. --><addressed-by>FCS_CKM_EXT.5 (optional)</addressed-by><rationale>Mitigates the threat by authenticating data using a FAK.</rationale><addressed-by>FCS_COP_EXT.1 (optional)</addressed-by><rationale>Mitigates the threat by protecting a FAK with the same protections as a FEK.</rationale><addressed-by>FDP_AUT_EXT.1 (optional)</addressed-by><rationale>Mitigates the threat by verifying the authenticity of files and providing notice if modification is detected.</rationale><addressed-by>FDP_AUT_EXT.2 (optional)</addressed-by><rationale>Mitigates the threat by authenticating the encrypted data using a keyed-hash function.</rationale><addressed-by>FDP_AUT_EXT.3 (optional)</addressed-by><rationale>Mitigates the threat by authenticating the encrypted data using an asymmetric signing and verification function.</rationale><addressed-by>FDP_PM_EXT.1 (optional)</addressed-by><rationale>Mitigates the threat by encrypting data during a power-managed state.</rationale><addressed-by>FDP_PRT_EXT.1</addressed-by><rationale>Mitigates the threat by encrypting a file or files in accordance with a specified algorithm.</rationale><addressed-by>FDP_PRT_EXT.2</addressed-by><rationale>Mitigates the threat by ensuring original plaintext data is destroyed once the data is decrypted or encrypted.</rationale><addressed-by>FIA_FCT_EXT.1 (optional)</addressed-by><rationale>Mitigates the threat by ensuring that files can be encrypted with unique KEKs per user.</rationale><addressed-by>FIA_FCT_EXT.2 (optional)</addressed-by><rationale>Mitigates the threat by providing a key sharing mechanism to safely share files between users.</rationale></threat><threat name="T.UNSAFE_AUTHFACTOR_VERIFICATION"><description><h:b>Flawed Authentication Factor Verification:</h:b> An attacker exploits a flaw in the validation or conditioning of             the authorization factor, allowing access to secure information. </description><!-- New mapping to build updated threat mapping table. --><addressed-by>FCS_VAL_EXT.1</addressed-by><rationale>Mitigates the threat by requiring the user be validated using an appropriate validation factor before any decryption occurs.</rationale><addressed-by>FIA_AUT_EXT.1</addressed-by><rationale>Mitigates the threat by authorizing the user using an appropriate authorization factor.</rationale></threat></threats></sec:Threats>
    <!-- 3.2 Assumptions -->
    <sec:Assumptions>
      <assumptions>
        <assumption name="A.AUTH_FACTOR">
          <description>An authorized user will be responsible for ensuring that all externally
              derived authorization factors have sufficient strength and entropy to reflect the
              sensitivity of the data being protected. This can apply to password- or
              passphrase-based, ECC CDH, and RSA authorization factors.</description>
          <objective-refer ref="OE.AUTHORIZATION_FACTOR_STRENGTH">
            <rationale>The operational environment objective OE.AUTHORIZATION_FACTOR_STRENGTH is realized through A.AUTH_FACTOR.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.EXTERNAL_FEK_PROTECTION">
          <description>External entities that implement ECC CDH or RSA that are used to encrypt
              and decrypt a FEK have the following characteristics: 
              <h:li>meet national requirements for the cryptographic mechanisms implemented</h:li> <h:li>require authentication via a pin or other mechanisms prior to allowing access to protected information (the decrypted FEK, or the private key)</h:li> <h:li>implement anti-hammer provisions where appropriate (for example, when a pin is the authentication factor).</h:li></description>
          <objective-refer ref="OE.STRONG_ENVIRONMENT_CRYPTO">
            <rationale>The operational environment objective OE.STRONG_ENVIRONMENT_CRYPTO is realized through A.EXTERNAL_FEK_PROTECTION.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.FILE_INTEGRITY">
          <description>When the file is in transit, it is not modified, otherwise if that
              possibility exists, the appropriate selections in Appendix B are chosen for Data
              Authentication.</description>
          <objective-refer ref="OE.STRONG_ENVIRONMENT_CRYPTO">
            <rationale>The operational environment objective OE.STRONG_ENVIRONMENT_CRYPTO is realized through A.STRONG_OE_CRYPTO.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.SHUTDOWN">
          <description>An authorized user will not leave the machine in a mode where sensitive
              information persists in non-volatile storage.</description>
          <objective-refer ref="OE.POWER_SAVE">
            <rationale>The operational environment objective OE.POWER_SAVE is realized through A.SHUTDOWN.</rationale>
          </objective-refer>
        </assumption>
        <assumption name="A.STRONG_OE_CRYPTO">
          <description>All cryptography implemented in the Operational Environment and used by the
              TOE will meet the requirements listed in this PP-Module. This includes
              generation of external token authorization factors by a RBG.</description>
          <objective-refer ref="OE.STRONG_ENVIRONMENT_CRYPTO">
            <rationale>The operational environment objective OE.STRONG_ENVIRONMENT_CRYPTO is realized through A.STRONG_OE_CRYPTO.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </sec:Assumptions>
    <!-- 3.3 Organizational Security Policies -->
    <sec:Organizational_Security_Policies>
      <OSPs/>
    </sec:Organizational_Security_Policies>
  </sec:Security_Problem_Definition>
  <!-- 4.0 Security Objectives -->
  <sec:Security_Objectives>
    <!-- 4.1 Security Objectives for the TOE -->
    <!-- 4.2 Security Objctives for the Operational Environment -->
    <sec:Security_Objectives_for_the_Operational_Environment>
      <SOEs>
        <SOE name="OE.AUTHORIZATION_FACTOR_STRENGTH">
          <description>An authorized user will be responsible for ensuring that all externally
            derived authorization factors have sufficient strength and entropy to reflect the
            sensitivity of the data being protected. This can apply to password or
            passphrase based, ECC CDH, and RSA authorization factors.</description>
        </SOE>
        <SOE name="OE.POWER_SAVE">
          <description>The non-mobile operational environment must be configurable so that there
            exists at least one mechanism that will cause the system to enter a safe power state (A.SHUTDOWN). Any
            such mechanism (e.g., sleep, hibernate) that does not conform to this requirement must
            be capable of being disabled. The mobile operational environment must be
            configurable such that there exists at least one mechanism that will cause the system to
            lock upon a period of time. </description>
        </SOE>
        <SOE name="OE.STRONG_ENVIRONMENT_CRYPTO">
          <description>The Operating environment will provide a cryptographic function capability
            that is commensurate with the requirements and capabilities of the TOE.</description>
        </SOE>
      </SOEs>
    </sec:Security_Objectives_for_the_Operational_Environment>
    <!-- 4.3 Security Objectives Rationale -->
    <sec:Security_Objectives_Rationale/>
  </sec:Security_Objectives>
  <!-- 5.0 Security Requirements -->
  <sec:Security_Requirements title="Security Requirements">
    <!-- 5.1 App PP Security Functional Requirements Direction -->
    <base-pp id="b-appp" name="Application Software" product="application" short="App" version="2.0">
      <git>
        <url/>
        <branch/>
      </git>
      <url>https://www.niap-ccevs.org/protectionprofiles/516</url>
      <sec-func-req-dir>The TOE is expected to rely on some of the security functions implemented by the application
        as a whole and evaluated against .
        The following section describes any modifications that the ST author must make to the SFRs defined in the Base-PP in addition to what is mandated by section 5.2.</sec-func-req-dir>
      <!-- 5.1.1 Modified SFRs -->
      <modified-sfrs/>
      <!-- 5.1.2 Additional SFRs -->
      <additional-sfrs/>
      <con-toe>When this PP-Module is used to extend the AppPP, the TOE type for the overall TOE is still an application. The TOE boundary is simply extended to include File Encryption functionality that is provided by the application.</con-toe>
      <con-sec-prob/>
      <con-obj/>
      <con-op-en/>
      <con-mod ref="T.UNAUTHORIZED_DATA_ACCESS">This threat is a variation on T.PHYSICAL_ACCESS defined in the Base-PP.
        In this case, the "sensitive data at rest" is the data that the TOE is intended to protect.</con-mod>
      <con-mod ref="T.MANAGEMENT_ACCESS">This threat is a variation on T.LOCAL_ATTACK defined in the Base-PP.
        The Base-PP does not define access-controlled management functions so this PP-Module goes beyond it by specifying misuse of the management interface, or
        inability to fully use the management interface, as threats to the TSF.</con-mod>
      <con-mod ref="T.KEYING_MATERIAL_COMPROMISE">This threat is a specific example of T.PHYSICAL_ACCESS defined in the Base-PP. 
        Specifically, this PP-Module defines a method of maliciously gaining access to sensitive data at rest that is particular to the technology type of this PP-Module.</con-mod>
      <con-mod ref="T.UNSAFE_AUTHFACTOR_VERIFICATION">This threat is a specific example of T.PHYSICAL_ACCESS defined in the Base-PP. 
        Specifically, this PP-Module defines a method of maliciously gaining access to sensitive data at rest that is particular to the technology type of this PP-Module.</con-mod>
      <con-mod ref="T.KEYSPACE_EXHAUST">This threat is a specific example of T.PHYSICAL_ACCESS defined in the Base-PP. 
        Specifically, this PP-Module defines a method of maliciously gaining access to sensitive data at rest that is particular to the technology type of this PP-Module.</con-mod>
      <con-mod ref="T.PLAINTEXT_COMPROMISE">This threat is a specific example of T.PHYSICAL_ACCESS defined in the Base-PP. 
        Specifically, this PP-Module defines a method of maliciously gaining access to sensitive data at rest that is particular to the technology type of this PP-Module.</con-mod>
    </base-pp>
    <!-- 5.2 TOE Security Functional Requirements -->
    <man-sfrs>
      <!-- 5.2.1 Cryptographic Support (FCS) -->
      <section title="Cryptographic Support (FCS)" id="fcs">
        <ext-comp-def title="Cryptographic Key Management" fam-id="FCS_CKM_EXT">
          <fam-behavior>Components in this family define requirements for key management activities that are beyond the scope of what is defined in the FCS_CKM family in CC Part 2.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Key Chaining and Key Storage" fam-id="FCS_KYC_EXT">
          <fam-behavior>Components in this family define requirements for the secure storage of keys through the use of a logical key chain.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Validation" fam-id="FCS_VAL_EXT">
          <fam-behavior>Components in this family define requirements for validation of data supplied to the TOE and any consequences resulting from failed validation attempts.</fam-behavior>
        </ext-comp-def>
        <!-- FCS_CKM.6 Timing and event of cryptographic key destruction -->
        <f-component cc-id="fcs_ckm.6" id="fcs-ckm-6" name="Timing and event of cryptographic key destruction">
          <consistency-rationale>This SFR extends the cryptographic functionality defined in the Base-PP by specifying a method for key destruction. 
            It is consistent with the Base-PP because keys generated by the Base-PP portion of the TOE may also be destroyed in the manner specified by this SFR.
          </consistency-rationale>
          <f-element id="fcs-ckm-6e1">
            <title>The TSF shall destroy [<h:i>all keys and key material</h:i>] when <h:i>no longer needed</h:i>.</title>
            <note role="application">
              
              Keys, including intermediate keys and key material that are no longer
              needed are destroyed by using an approved method, FCS_CKM.6.2. Examples of keys are
              intermediate keys, submasks. There may be instances where keys or key material
              that are contained in persistent storage are no longer needed and require destruction. 
              Base on their implementation, vendors will explain when certain keys are no longer needed. There
              are multiple situations in which key material is no longer necessary, for example, a wrapped
              key may need to be destroyed when a password is changed. However, there are instances
              when keys are allowed to remain in memory, for example, a device identification key. If a
              PIN was used for a smart card and managed by the TOE, ensuring that the PIN was properly destroyed must be addressed.
                              
              
            </note>
            <aactivity level="component">
              <TSS>The evaluator shall verify the TSS provides a high level description of what it means for keys and key material 
		            to be no longer needed and when they should be expected to be destroyed.
		      
		            The evaluator shall verify the TSS provides a high level description of what it means
                for keys and key material to be no longer needed and when then should be expected to
                be destroyed. <h:br/><h:br/>   
		          The evaluator examines the KMD to ensure it describes how the keys are managed in volatile memory. 
              This description includes details of how each identified key is introduced into volatile memory (e.g. by derivation 
              from user input, or by unwrapping a wrapped key stored in non-volatile memory) and how they are overwritten.<h:br/><h:br/>

              The evaluator shall check to ensure the KMD lists each type of key that is stored in in non-volatile memory, and 
              identifies how the TOE interacts with the underlying platform to manage keys (e.g., store, retrieve, destroy). 
              The description includes details on the method of how the TOE interacts with the platform, including an identification 
              and description of the interfaces it uses to manage keys (e.g., file system APIs, platform key store APIs).<h:br/><h:br/>

              The evaluator examines the interface description for each different media type to ensure that the 
              interface supports the selection(s) and description in the KMD.<h:br/><h:br/>

              If the ST makes use of the open assignment and fills in the type of pattern that is used, the evaluator 
              examines the KMD to ensure it describes how that pattern is obtained and used. The evaluator shall 
              verify that the pattern does not contain any CSPs.<h:br/><h:br/>

              The evaluator shall check that the KMD identifies any configurations or 
              circumstances that may not strictly conform to the key destruction requirement.<h:br/><h:br/>

              If the selection "destruction of all KEKs protecting target key, 
              where none of the KEKs protecting the target key are derived" is included the evaluator shall examine the TOE's 
              keychain in the KMD and identify each instance when a key is destroyed by this method. In each instance the evaluator 
              shall verify all keys capable of decrypting the target key are destroyed in accordance with a specified key destruction 
              method in FCS_CKM.6.2. The evaluator shall verify that all of the keys capable of decrypting the target key are not 
              able to be derived to reestablish the keychain after their destruction. <h:br/><h:br/>
		      
                The evaluator shall verify the KMD includes a description of the areas where keys and
                key material reside and when the keys and key material are no longer needed.<h:br/><h:br/>
                
                The evaluator shall verify the KMD includes a key lifecycle, that includes a description
                where key material reside, how the key material is used, how it is determined that keys
                and key material are no longer needed, and how the material is destroyed once it is not
                needed and that the documentation in the KMD follows FCS_CKM.6.2 for the
                destruction.<h:br/><h:br/></TSS>
              <Guidance>There are a variety of concerns that may prevent or delay key destruction in some cases.<h:br/><h:br/>

              The evaluator shall check that the guidance documentation identifies configurations or circumstances that may 
              not strictly conform to the key destruction requirement, and that this description is consistent with the 
              relevant parts of the TSS and any other relevant Required Supplementary Information.<h:br/><h:br/>

              The evaluator shall check that the guidance documentation provides guidance on situations where key 
              destruction may be delayed at the physical layer and how such situations can be avoided or mitigated if possible.<h:br/><h:br/>

Some examples of what is expected to be in the documentation are provided here. <h:br/><h:br/>

              When the TOE does not have full access to the physical memory, it is possible that the storage may be implementing 
              wear-leveling and garbage collection. This may create additional copies of the key that are logically inaccessible 
              but persist physically. In this case, to mitigate this the drive should support the TRIM command and implements 
              garbage collection to destroy these persistent copies when not actively engaged in other tasks.<h:br/><h:br/>

              Drive vendors implement garbage collection in a variety of different ways, as such there is a variable amount of time 
              until data is truly removed from these solutions. There is a risk that data may persist for a longer amount of time 
              if it is contained in a block with other data not ready for erasure. To reduce this risk, the operating system and 
              file system of the OE should support TRIM, instructing the non-volatile memory to erase copies via garbage collection 
              upon their deletion. If a RAID array is being used, only set-ups that support TRIM are utilized. If the drive is 
              connected via PCI-Express, the operating system supports TRIM over that channel.<h:br/><h:br/>

              The drive should be healthy and contains minimal corrupted data and should be end of lifed before a significant 
              amount of damage to drive health occurs, this minimizes the risk that small amounts of 
              potentially recoverable data may remain in damaged areas of the drive.<h:br/><h:br/></Guidance>
              <Tests>
                These tests are only for key destruction provided by the application, test 2 does not apply to any keys using the selection "new value of a key": <h:br/> <h:br/>
                <testlist>
                   <h:br/><h:br/>  <h:br/><h:br/> Tests 3 and 4 do not apply for the selection instructing the underlying platform to destroy the representation of the key, as the TOE has no visibility into the inner workings and completely relies on the underlying platform. <h:br/><h:br/>  <h:br/><h:br/>  <h:br/><h:br/> 
                  <test>[Conditional; applies when the application does not perform the zeroization (e.g. garbage collecting) for each key held in volatile memory for FCS_CKM.6.2 (assuming the selection "destruction of the reference followed by a request for garbage collection")] <h:br/><h:br/> Applied to each key held in volatile memory and subject to destruction by overwrite by the TOE (whether or not the value is subsequently encrypted for storage in volatile or non-volatile memory). In the case where the only selection made for the key destruction method was removal of power, then this test is unnecessary. <h:br/><h:br/>  <h:br/><h:br/> The evaluator shall: <h:br/><h:br/>  <h:br/><h:br/> 1. Record the value of the key in the TOE subject to clearing. <h:br/><h:br/> 2. Cause the cause the TOE or the underlying platform to dump to perform a normal cryptographic processing with the key from Step #1. <h:br/><h:br/> 3. Cause the TOE to clear the key. <h:br/><h:br/> 4. Cause the TOE to stop the execution but not exit. <h:br/><h:br/> 5. Cause the TOE to dump the entire memory of the TOE into a binary file. <h:br/><h:br/> 6. Search the content of the binary file created in Step #5 for instances of the known key value from Step #1. <h:br/><h:br/> Steps #1-6 ensure that the complete key does not exist anywhere in volatile memory. If a copy is found, then the test fails.</test>
                  <test>[Conditional; applies when instructing the underlying platform to destroy the key] If new value of a key is selected this test does not apply. <h:br/><h:br/> Applied to each key held in non-volatile memory and subject to destruction by the TOE. <h:br/><h:br/> The evaluator shall use special tools (as needed), provided by the TOE developer if necessary, to ensure the tests function as intended. <h:br/><h:br/> 1. Identify the purpose of the key and what access should fail when it is deleted. (e.g. the file encryption key being deleted would cause data decryption to fail.) <h:br/><h:br/> 2. Cause the TOE to clear the key. <h:br/><h:br/> 3. Have the TOE attempt the functionality that the cleared key would be necessary for. <h:br/><h:br/> 4. The test succeeds if Step #3 fails.</test>
                  <test>Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media (e.g., MBR file system): <h:br/><h:br/> 1. Record the value of the key in the TOE subject to clearing. <h:br/><h:br/> 2. Cause the TOE to perform a normal cryptographic processing with the key from Step #1. <h:br/><h:br/> 3. Cause the TOE to clear the key. <h:br/><h:br/> 4. Search the logical view that the key was stored in for instances of the known key value from Step #1. If a copy is found, then the test fails.</test>
                  <test>Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media: <h:br/><h:br/> 1. Record the logical storage location of the key in the TOE subject to clearing. <h:br/><h:br/> 2. Cause the TOE to perform a normal cryptographic processing with the key from Step #1. <h:br/><h:br/> 3. Cause the TOE to clear the key. <h:br/><h:br/> 4. Read the logical storage location in Step #1 of non-volatile memory to ensure the appropriate pattern is utilized. <h:br/><h:br/> The test succeeds if correct pattern is used to overwrite the key in the memory location. If the pattern is not found the test fails.</test>
                   <h:br/><h:br/> 
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fcs-ckm-6e2">
            <title>The TSF shall destroy cryptographic keys and keying material specified by FCS_CKM.6.1
            in accordance with a specified cryptographic key destruction method
            [ <h:i> <selectables linebreak="yes"><selectable id="fcs_ckm.6.2_1">For volatile memory, the destruction shall be executed by a <selectables><selectable id="fcs_ckm.6.2_2">single overwrite consisting of <selectables><selectable id="fcs_ckm.6.2_3">a pseudo-random pattern using the TSF's RBG</selectable><selectable id="fcs_ckm.6.2_4">zeroes</selectable><selectable id="fcs_ckm.6.2_5">ones</selectable><selectable id="fcs_ckm.6.2_6">new value of a key</selectable><selectable id="fcs_ckm.6.2_8"><assignable>any value that does not contain any CSP</assignable></selectable></selectables> </selectable><selectable id="fcs_ckm.6.2_9">removal of power to the memory</selectable><selectable id="fcs_ckm.6.2_10">destruction of reference to the key directly followed by a request for garbage collection</selectable></selectables> </selectable><selectable id="fcs_ckm.6.2_11">For non-volatile memory, the destruction shall be executed by <selectables><selectable id="fcs_ckm.6.2_12">destruction of all KEKs protecting the target key, where none of the KEKs protecting the target key are derived</selectable><selectable id="fcs_ckm.6.2_13">the invocation of an interface provided by the underlying platform that <selectables><selectable id="fcs_ckm.6.2_14">logically addresses the storage location of the key and performs a <selectables><selectable id="fcs_ckm.6.2_15">single</selectable><selectable id="fcs_ckm.6.2_17"><assignable>ST author defined multi-pass</assignable></selectable></selectables> overwrite consisting of <selectables><selectable id="fcs_ckm.6.2_18">a pseudo-random pattern using the TSF's RBG</selectable><selectable id="fcs_ckm.6.2_19">zeroes</selectable><selectable id="fcs_ckm.6.2_20">ones</selectable><selectable id="fcs_ckm.6.2_21">new value of a key</selectable><selectable id="fcs_ckm.6.2_23"><assignable>any value that does not contain any CSP</assignable></selectable></selectables> </selectable><selectable id="fcs_ckm.6.2_24">instructs the underlying platform to destroy the abstraction that represents the key</selectable></selectables> </selectable></selectables> </selectable></selectables>]</h:i>
              that meets the following: [<h:i>no standard</h:i>].
            </title>
            <note role="application">              
              The interface referenced in the requirement could take different forms, the most likely 
              of which is an application programming interface to an OS kernel. There may be various levels of abstraction visible. 
              For instance, in a given implementation that overwrites a key stored in non-volatile memory, the application may have 
              access to the file system details and may be able to logically address specific memory locations. In another 
              implementation that instructs the underlying platform to destroy the representation of a key stored in non-volatile 
              memory, the application may simply have a handle to a resource and can only ask the platform to delete the resource, 
              as may be the case with a platforms secure key store. The latter implementation should only be used for the most 
              restricted access. The level of detail to which the TOE has access will be reflected in the TSS section of the ST. 
              Several selections allow assignment of a 'value that does not contain any CSP'. This means that the TOE uses some 
              other specified data not drawn from a source that may contain key material or reveal information about key material, 
              and not being any of the particular values listed as other selection options. The point of the phrase 'does not contain 
              any CSP' is to ensure that the overwritten data is carefully selected, and not taken from a general 'pool' that might 
              contain current or residual data that itself requires confidentiality protection.<h:br/><h:br/>

              For the selection "destruction of all KEKs protecting target key, where 
              none of the KEKs protecting the target key are derived", a key can be considered destroyed by destroying the key that 
              protects the key. If a key is wrapped or encrypted it is not necessary to "overwrite" that key, overwriting the key 
              that is used to wrap or encrypt the key used to encrypt/decrypt data, using the appropriate method for the memory 
              type involved, will suffice. For example, if a product uses a Key Encryption Key (KEK) to encrypt a File Encryption 
              Key (FEK), destroying the KEK using one of the methods in FCS_CKM.6 is sufficient, since the FEK would no longer 
              be usable (of course, presumes the FEK is still encrypted and the KEK cannot be recovered or re-derived). </note>
          </f-element>
        </f-component>
        <!-- FCS_CKM_EXT.2 File Encryption Key (FEK) Generation -->
        <f-component cc-id="fcs_ckm_ext.2" id="fcs-ckm-ext-2" name="File Encryption Key (FEK) Generation">
          <consistency-rationale>This SFR describes behavior that is not in scope of the Base-PP. 
            It is consistent with the Base-PP because it may use the same random bit generation function defined in the Base-PP.
          </consistency-rationale>
          <comp-lev> describes the method by which the TSF acquires or generates file encryption keys.</comp-lev>
          <management>There are no specific management functions identified.</management>
          <audit>There are no auditable events foreseen.</audit>
          <dependencies>FCS_RBG_EXT.1 Random Bit Generation Services</dependencies>
          <f-element id="fcs-ckm-ext-2e1">
            <title> The TSF shall
               <selectables><selectable id="fcs_ckm_ext.2.1_1">accept FEK from an enterprise management server</selectable><selectable id="fcs_ckm_ext.2.1_2">generate FEK cryptographic keys <selectables linebreak="yes"><selectable id="fcs_ckm_ext.2.1_3">using a Random Bit Generator as specified in FCS_RBG_EXT.1 (from <xref to="bibAppPP"/>) and with entropy corresponding to the security strength of AES key sizes <h:i>[256-bit]</h:i></selectable><selectable id="fcs_ckm_ext.2.1_4">using key generation methods compliant with NIST SP 800-133r2,</selectable><selectable id="DRVFEKPAS">derived from a password/passphrase that is conditioned as defined in FCS_CKM_EXT.6</selectable></selectables> </selectable></selectables>.
            </title>
            <ext-comp-def-title><title> The TSF shall
              <selectables><selectable> accept FEK from an enterprise management server</selectable><selectable> generate FEK cryptographic keys <h:br/><selectables linebreak="yes"><selectable> using a Random Bit Generator as specified in FCS_RBG_EXT.1
                    and with entropy corresponding to the security strength of AES key sizes <assignable>supported key size</assignable></selectable><selectable>using key generation methods compliant with NIST SP 800-133r2,</selectable><selectable id="DRVFEKPAS"> derived from a password/passphrase that is conditioned as defined in FCS_CKM_EXT.6</selectable></selectables></selectable></selectables>.
            </title></ext-comp-def-title>
            <note role="application">For keys generated from a password, even if referencing NIST SP 800-133r2 for password-based key generation, "derived from a password/passphrase that is conditioned as defined in FCS_CKM_EXT.6" must be selected so that FCS_CKM_EXT.6 is included.</note>
            <aactivity level="component">
              <TSS>FCS_CKM_EXT.2.1: The evaluator shall review the TSS to determine that a
              description covering how and when the FEKs are generated exists. The description must
              cover all environments on which the TOE is claiming conformance, and include any
              preconditions that must exist in order to successfully generate the FEKs. The evaluator shall verify 
              that the description of how the FEKs are generated is consistent with
              the instructions in the AGD guidance, and any differences that arise from different
              platforms are taken into account. <h:br/><h:br/> 

              Conditional: <h:br/> 
              If 'using a Random Bit Generator' was selected, the evaluator shall verify that the TSS describes how the functionality
              described by FCS_RBG_EXT.1 (from the <xref to="bibAppPP"/>) is invoked to
              generate FEK. To the extent possible from the description of the RBG functionality in
              FCS_RBG_EXT.1 (from <xref to="bibAppPP"/>), the evaluator shall determine that the key size being
              requested is identical to the key size and mode to be used for the
              decryption/encryption of the user data (FCS_COP.1/SKC) (from <xref to="bibAppPP"/>).  <h:br/><h:br/> 

              Conditional: <h:br/>
              If 'using key generation methods compliant with NIST SP 800-133r2' was selected, the evaluator shall verify that
              the TSS describes how the functionality described by NIST SP 800-133r2 is implemented to generate the FEK.
              The evaluator shall verify that the description of the key generation method matches the methods described in
              SP 800-133r2 and that the FEK is chained to an approved RBG. The evaluator shall verify that the key size and mode
              being requested is identical to the key size and mode to be used for the decryption/encryption of the user data (FCS_COP.1/SKC) (from <xref to="bibAppPP"/>). <h:br/><h:br/>

              Conditional: <h:br/>               
              If 'derived from a password/passphrase' is selected, the examination of the TSS section is performed as
              part of FCS_CKM_EXT.6 evaluation activities. <h:br/><h:br/> 


              FCS_CKM_EXT.2.2: The evaluator shall
              verify the TSS describes how a FEK is used for a protected
              resource and associated with that resource. The evaluator confirms that-per this description-the
              FEK is unique per resource (file or set of files) and that the FEK is established using
              the mechanisms specified in FCS_CKM_EXT.2.1). <h:br/><h:br/>
              None. <h:br/><h:br/></TSS>
              <Guidance> The evaluator shall review the
              instructions in the AGD guidance to determine that any explicit actions that need to
              be taken by the user to establish a FEK exist-taking into account any differences that
              arise from different platforms-and are consistent with the description in the TSS.
              <h:br/><h:br/></Guidance>
              <Tests>None.</Tests>
            </aactivity>
          </f-element>
          <f-element id="fcs-ckm-ext-2e2">
            <title>The TSF shall use a unique FEK for each file (or set of files) using the
              mechanism on the client as specified in FCS_CKM_EXT.2.1.</title>
          </f-element>
        </f-component>
        <!-- FCS_KYC_EXT.1 Key Chaining and Key Storage -->
        <f-component cc-id="fcs_kyc_ext.1" id="fcs-kyc-ext-1" name="Key Chaining and Key Storage">
          <consistency-rationale>The Base-PP defines how stored keys are protected. This SFR extends that functionality by defining the logical hierarchy of how keys are logically
            protected by other keys or other secret data. 
          </consistency-rationale>
          <comp-lev> requires the TSF to specify how it implements key chaining.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT: <h:ul><h:li>Configuration of the cryptographic functionality.</h:li></h:ul></management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FCS_COP.1 Cryptographic Operation<h:br/>
          FCS_KDF_EXT.1 Cryptographic Key Derivation Function<h:br/>
          FCS_SMC_EXT.1 Submask Combining</dependencies>
          <f-element id="fcs-kyc-ext-1e1">
            <title> The TSF shall maintain a key chain of: 
               <selectables linebreak="yes"><selectable id="fcs_kyc_ext.1.1_1">a conditioned password as the [<h:i>FEK</h:i>]</selectable><selectable id="HASKEK">[<h:i>KEKs</h:i>] originating from <selectables><selectable id="fcs_kyc_ext.1.1_2">one or more authorization factors(s)</selectable><selectable id="fcs_kyc_ext.1.1_3">a file encryption enterprise management server</selectable></selectables> to <selectables><selectable id="fcs_kyc_ext.1.1_4">the FEK(s)</selectable><selectable id="fcs_kyc_ext.1.1_5">a file encryption enterprise management server</selectable></selectables> using the following method(s): <selectables linebreak="yes"><selectable id="fcs_kyc_ext.1.1_6">utilization of the platform key storage</selectable><selectable id="fcs_kyc_ext.1.1_7">utilization of platform key storage that performs key wrap with a TSF provided key</selectable><selectable id="USEKEYWRA">implementation of key establishment as specified in FCS_CKM.2 (from the Base-PP)</selectable><selectable id="USEKEYDER">implementation of key derivation as specified in FCS_KDF_EXT.1</selectable><selectable id="USEKEYWRA">implementation of key wrapping as specified in FCS_COP.1/KW</selectable><selectable id="USEKEYENC">implementation of key encryption as specified in FCS_COP.1/KE</selectable><selectable id="USEKEYCOM">implementation of key combining as specified in FCS_SMC_EXT.1</selectable><selectable id="USEKEYTRA">implementation of key transport as specified in FCS_COP.1/KT</selectable></selectables> while maintaining an effective strength of commensurate with the strength of the FEK</selectable></selectables>  
              and 
               <selectables><selectable id="fcs_kyc_ext.1.1_8">no supplemental key chains</selectable><selectable id="fcs_kyc_ext.1.1_9">other supplemental key chains that protect a key or keys in the primary key chain using the following method(s): <selectables linebreak="yes"><selectable id="fcs_kyc_ext.1.1_10">utilization of the platform key storage</selectable><selectable id="fcs_kyc_ext.1.1_11">utilization of platform key storage that performs key wrap with a TSF provided key</selectable><selectable id="SUPPKEYEST">implementation of key establishment as specified in FCS_CKM.2 (from the Base-PP)</selectable><selectable id="SUPPKEYENC">implementation of key encryption as specified in FCS_COP.1/KE</selectable><selectable id="SUPPKEYTRA">implementation of key transport as specified in FCS_COP.1/KT</selectable><selectable id="SUPPKEYWRA">implementation of key wrapping as specified in FCS_COP.1/KW</selectable><selectable id="SUPPKEYDER">implementation of key derivation as specified in FCS_KDF_EXT.1</selectable><selectable id="SUPPKEYCOM">implementation of key combining as specified in FCS_SMC_EXT.1</selectable></selectables> </selectable></selectables>.
            </title>
            <ext-comp-def-title><title> The TSF shall maintain a key chain of: 
              <selectables linebreak="yes"><selectable>a conditioned password as the <assignable>key type</assignable></selectable><selectable><assignable>key type</assignable> originating from
                <assignable>origin of key</assignable> 
                 to 
                 <assignable>end point of key chain</assignable>
                  using the following method(s): <assignable>list of supported key protection methods</assignable>
                  while maintaining an effective strength of commensurate with the strength of the FEK</selectable></selectables> 
              and 
              <selectables><selectable> no supplemental key chains</selectable><selectable> other supplemental key chains that protect a key or keys in the primary key chain using the following method(s):
                  <assignable>list of supported key protection methods</assignable></selectable></selectables>.
            </title></ext-comp-def-title>
            <note role="application">
              
              
              Key Chaining is the method of using multiple layers of
              encryption keys to ultimately secure the FEK. The number of intermediate keys will
              vary. This applies to all keys that contribute to the ultimate wrapping or derivation
              of the FEK. For the first selection, the ST author
              selects the method used for the keychain.  <h:br/><h:br/>

              If the second option is chosen ("KEKs originating:")
              , then the ST author chooses all methods for production and protection of KEKs in the keychain 
              from the options in the second selection.  For this option, the ST author must also specify the 
              strength of the keys in the keychain.  It should be noted that "maintaining overall strength:
              commensurate with the overall strength of the FEK" is meant to cover the threat for this PP-Module 
              of a powered-off device being recovered by an adversary, who subsequently attempts to recover 
              the FEK through a compromise of the key chain. <h:br/><h:br/>

              The third selection in the requirement is used to select the types of keys used in the key chain 
              (both symmetric and asymmetric keys are allowed).  
              <h:br/><h:br/>

              If a supplemental keychain is used, then the ST author selects the second option in the sixth 
              selection and then chooses the method by which these keys are protected.  Keys in the 
              supplemental key chain may be of any size, as they only provide additional protection to the 
              primary key chain.  Compromise (according the PP-Module use case) of the secondary key chain cannot 
              circumvent the protection provided by the primary keychain. <h:br/><h:br/>

             If the selections where the TOE implements KEKs are chosen for the primary or supplemental key chains
             then FCS_CKM_EXT.3 shall be included.<h:br/><h:br/>

            The selections for an enterprise management server permit the key chain may originate or terminate from 
            an enterprise management server.  <h:br/><h:br/>
              The server may provide a key needed to start a chain or the server may receive a key that ends a chain.  <h:br/><h:br/>
              The key management internal to the server is not evaluated here. This permits the enterprise management server to 
            function in the middle of a larger key chain.</note>
            <aactivity level="component">
              <TSS>The evaluator shall verify the TSS contains a high level 
              description of all keychains and authorization methods selected in FIA_AUT_EXT.1 
              that are used to protect the KEK or FEK. <h:br/><h:br/>The evaluator shall examine the KMD to ensure it describes 
              each key chain in detail, and these descriptions correspond with the selections of the requirement. 
              The description of each key chain shall be reviewed to ensure the options for maintaining the key chain are documented.<h:br/><h:br/>

              The evaluator shall verify the KMD to ensure that it describes how each key chain process functions, 
              such that it does not expose any material that might compromise any key in the chain. A high-level 
              description should include a diagram illustrating the keychain(s) implemented and detail where all 
              keys and keying material is stored or how the keys or key material are derived. The evaluator shall examine the primary 
              key chain to ensure that at no point the chain could be broken without a cryptographic exhaust or 
              knowledge of the KEK or FEK and the effective strength of the FEK is maintained throughout the Key Chain 
              as specified in the requirement.<h:br/><h:br/></TSS>
              <Guidance> None. <h:br/><h:br/></Guidance>
              <Tests>None.</Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_VAL_EXT.1 Validation -->
        <f-component cc-id="fcs_val_ext.1" id="fcs-val-ext-1" name="Validation">
          <consistency-rationale>This SFR goes beyond the functionality defined by the Base-PP by defining a method by which the TSF can validate the correctness of data input to it.
          </consistency-rationale>
          <comp-lev> requires the TSF to specify what data is being validated and how the validation is performed.</comp-lev>
          <management>There are no specific management functions identified.
          </management>
          <audit>The following actions should be auditable if FAU_GEN Security audit data
            generation is included in the PP/ST:<h:ul><h:li>Minimal: Change to configuration of validation function behavior.</h:li></h:ul></audit>
          <dependencies>FCS_COP.1 Cryptographic Operation</dependencies>
          <f-element id="fcs-val-ext-1e1">
            <title>The TSF shall perform validation of the [<h:i>user</h:i>] by 
               <selectables><selectable id="fcs_val_ext.1.1_1">receiving assertion of the subject's validity from <assignable>Operational Environment component responsible for authentication</assignable> </selectable><selectable id="fcs_val_ext.1.1_3">validating the <selectables><selectable id="fcs_val_ext.1.1_4">submask</selectable><selectable id="fcs_val_ext.1.1_5">intermediate key</selectable></selectables> using the following methods: <selectables><selectable id="fcs_val_ext.1.1_6">key wrap as specified in FCS_COP.1/KW</selectable><selectable id="fcs_val_ext.1.1_7">hash the <selectables><selectable id="fcs_val_ext.1.1_8">submask</selectable><selectable id="fcs_val_ext.1.1_9">intermediate key</selectable><selectable id="fcs_val_ext.1.1_10">FEK</selectable></selectables> as specified in FCS_COP.1/Hash (from <xref to="bibAppPP"/>) and compare it to a stored hash</selectable><selectable id="fcs_val_ext.1.1_11">decrypt a known value using the <selectables><selectable id="fcs_val_ext.1.1_12">submask</selectable><selectable id="fcs_val_ext.1.1_13">intermediate key</selectable><selectable id="fcs_val_ext.1.1_14">FEK</selectable></selectables> as specified in FCS_COP.1/SKC (from <xref to="bibAppPP"/>) and compare it against a stored known value</selectable></selectables> </selectable></selectables>.               
            </title>
            <ext-comp-def-title><title>The TSF shall perform validation of the <assignable>subject requiring validation</assignable> by 
              <selectables><selectable>receiving assertion of the subject's validity from <assignable>Operational Environment component responsible for authentication</assignable></selectable><selectable>validating the <selectables><selectable>submask</selectable><selectable>intermediate key</selectable></selectables> using the following methods: <selectables><selectable>key wrap as specified in FCS_COP.1</selectable><selectable>hash the 
                    <selectables><selectable>submask</selectable><selectable>intermediate key</selectable><selectable>FEK</selectable></selectables> as specified in FCS_COP.1 and compare it to a stored hash</selectable><selectable>decrypt a known value using the 
                    <selectables><selectable>submask</selectable><selectable>intermediate key</selectable><selectable>FEK</selectable></selectables> as specified in FCS_COP.1 and compare it against a stored known value</selectable></selectables></selectable></selectables>.               
            </title></ext-comp-def-title>
            <aactivity level="component">
              <TSS>Conditional: <h:br/>If 'validating' is selected in FCS_VAL_EXT.1.1, the evaluator shall examine the TSS to determine which authorization factors support validation.<h:br/><h:br/>
                The evaluator shall examine the TSS to ensure that it contains a high-level description of how how the submasks are validated. If multiple submasks are used within the TOE, 
                the evaluator shall verify that the TSS describes how each is validated (e.g., each submask validated before combining, once combined validation takes place). <h:br/><h:br/>
                
                Conditional: <h:br/>If 'receiving assertion' is selected in FCS_VAL_EXT.1.1, the evaluator shall examine the TSS to verify that it describes the environments that can be leveraged with the TOE and how each claims to perform validation.
                The evaluator shall ensure that none of the stated platform validation mechanisms weaken the key chain of the product.<h:br/><h:br/>
              None. <h:br/><h:br/></TSS>
              <Guidance>If the validation functionality is configurable, the evaluator shall examine the operational guidance
                to ensure it describes how to configure the TOE to ensure the limits regarding validation attempts can be established. <h:br/><h:br/></Guidance>
              <Tests>There are no test activities for this requirement.</Tests>
            </aactivity>
          </f-element>
          <f-element id="fcs-val-ext-1e2">
            <title>The TSF shall require validation of the [<h:i>user</h:i>] prior to [<h:i>decrypting any FEK</h:i>].</title>
            <ext-comp-def-title><title>The TSF shall require validation of the <assignable>subject requiring validation</assignable> prior to <assignable>action requiring validation</assignable>.</title></ext-comp-def-title>
            <note role="application">Two iterations of this SFR are also defined in PP-Module for File Encryption Enterprise Management. 
              If the TOE also claims this module, the ST author should iterate these SFRs by using "/FE" and "/EM" as unique identifiers for the iterations. This will allow the reader
              to easily determine which iteration applies to each TOE component.<h:br/><h:br/></note>
          </f-element>
        </f-component>
        <!-- FCS_VAL_EXT.2 Validation Remediation -->
        <f-component cc-id="fcs_val_ext.2" id="fcs-val-ext-2" name="Validation Remediation">
          <consistency-rationale>This SFR goes beyond the functionality defined by the Base-PP by defining a method by which the TSF can take security-relevant action if some data input to it is invalid.
            </consistency-rationale>
          <comp-lev> requires the TSF to specify what the TOE’s response is in the event of a data validation failure.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT: <h:ul><h:li>Configuration of the number of failed validation attempts required to trigger corrective behavior.</h:li> <h:li>Configuration of the corrective behavior to issue in the event of an excessive number of failed validation attempts.</h:li></h:ul></management>
          <audit>The following actions should be auditable if FAU_GEN Security audit data
              generation is included in the PP/ST:<h:ul><h:li>Minimal: Triggering of excessive validation failure response behavior.</h:li></h:ul></audit>
          <dependencies>FCS_VAL_EXT.1 Validation</dependencies>
          <f-element id="fcs_val_ext-2-1">
            <title>The TSF shall 
                 <selectables linebreak="yes"><selectable id="fcs_val_ext.2.1_1">perform a key destruction of the [<h:i>FEK(s)</h:i>] upon a configurable number of consecutive failed validation attempts</selectable><selectable id="fcs_val_ext.2.1_2">institute a delay such that only <assignable>ST author specified number of attempts</assignable> can be made within a 24 hour period</selectable><selectable id="fcs_val_ext.2.1_4">block validation after <assignable>ST author specified number of attempts</assignable> of consecutive failed validation attempts</selectable><selectable id="fcs_val_ext.2.1_6">require power cycle/reset the TOE after <assignable>ST author specified number of attempts</assignable> of consecutive failed validation attempts</selectable></selectables>.
              </title>
            <ext-comp-def-title><title>The TSF shall 
                <selectables linebreak="yes"><selectable>perform a key destruction of the <assignable>type of key(s)</assignable> upon a configurable number of consecutive failed validation attempts</selectable><selectable>institute a delay such that only <assignable>ST author specified number of attempts</assignable> can be made within a 24 hour period</selectable><selectable>block validation after <assignable>ST author specified number of attempts</assignable> of consecutive failed validation attempts</selectable><selectable>require power cycle/reset the TOE after <assignable>ST author specified number of attempts</assignable> of consecutive failed validation attempts</selectable></selectables>.
              </title></ext-comp-def-title>
            <note role="application">This SFR must be included if "provide user authorization" is selected in FIA_AUT_EXT.1.1.<h:br/><h:br/>
                
Two iterations of this SFR are also defined in PP-Module for File Encryption Enterprise Management. 
              If the TOE also claims this module, the ST author should iterate these SFRs by using "/FE" and "/EM" as unique identifiers for the iterations. This will allow the reader
              to easily determine which iteration applies to each TOE component.<h:br/><h:br/> 
                
                This requirement is used in the body of the ST if the ST author chooses "provide user authorization" in FIA_AUT_EXT.1.1.</note>
            <aactivity level="component">
              <TSS>The evaluator shall examine the TSS to determine which remediation options are supported for which authentication options.<h:br/><h:br/>
                  None. <h:br/><h:br/></TSS>
              <Guidance>If the remediation functionality is configurable, the evaluator shall examine the operational guidance
                  to ensure it describes how to configure the TOE to ensure the limits regarding validation attempts can be established.<h:br/><h:br/></Guidance>
              <Tests>
                The evaluator shall perform the following tests: <h:br/>
                <testlist>
                  <test>The evaluator shall determine the limit on the average rate of the number of consecutive failed authorization attempts. For each authentication factor supported, the evaluator will test the TOE by entering that number of incorrect authorization factors in consecutive attempts to access the protected data. If the limit mechanism includes any "lockout" period, the time period tested should include at least one such period. Then the evaluator will verify that the TOE behaves as described in the TSS.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.2 User Data Protection (FDP) -->
      <section title="User Data Protection (FDP)" id="fdp">
        <ext-comp-def title="Protection of Selected User Data" fam-id="FDP_PRT_EXT">
          <fam-behavior>Components in this family define requirements for the TOE's ability to protect sensitive data at rest.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="User Data Authentication" fam-id="FDP_AUT_EXT">
          <fam-behavior>Components in this family define requirements for authentication of protected user data.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Protection of Data in Power Managed States" fam-id="FDP_PM_EXT">
          <fam-behavior>Components in this family define requirements for the protection of data in cases where the host platform becomes locked or unpowered.</fam-behavior>
        </ext-comp-def>
        <!-- FDP_PRT_EXT.1 Protection of Selected User Data -->
        <f-component cc-id="fdp_prt_ext.1" id="fdp-prt-ext-1" name="Protection of Selected User Data">
          <consistency-rationale>This SFR is consistent with the Base-PP because it is a specific application of the FCS_COP.1/SKC function defined in the Base-PP.
          </consistency-rationale>
          <comp-lev> requires the TOE to encrypt and decrypt sensitive data using a specified cryptographic algorithm.</comp-lev>
          <management>There are no specific management functions identified.
          </management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FCS_CKM.6 Timing and event of cryptographic key destruction<h:br/>
          FCS_COP.1 Cryptographic Operation</dependencies>
          <f-element id="fdp-prt-ext-1e1">
            <title>The TSF shall perform encryption and decryption of the user-selected file (or set
              of files) in accordance with FCS_COP.1/SKC (from  <xref to="bibAppPP"/>). </title>
            <ext-comp-def-title><title>The TSF shall perform encryption and decryption of the user-selected file (or set
              of files) in accordance with FCS_COP.1. </title></ext-comp-def-title>
            <note role="application">This is the primary requirement for encrypting and decrypting
              the protected resources (files and sets of files). </note>
            <aactivity level="component">
              <TSS><h:br/> The evaluator shall examine the TSS to ensure there is a high-level description
                of how the FEK is protected. <h:br/><h:br/>
                
                The evaluator shall examine the TSS to ensure there
                is a description of how the FEK is protected.<h:br/><h:br/>
                The evaluator shall examine the TSS to ensure 
              that it describes all temporary files/resources created or memory used during the 
              decryption/encryption process and when those files/resources or memory is no longer needed.<h:br/><h:br/>
                
              The TSS shall describe how the TSF or TOE platform deletes the non-volatile memory (for example, files) 
              and volatile memory locations after the TSF is done with its decryption/encryption operation. <h:br/><h:br/></TSS>
              <Guidance><h:br/>There are no additional guidance evaluation activities for FDP_PRT_EXT.1.2. <h:br/><h:br/></Guidance>
              <Tests>
                <testlist>
                  <test>This test only applies for application provided functionality. <h:br/><h:br/>  <h:br/><h:br/> 1. Using a file editor, create and save a text file that is encrypted per the evaluation configured encryption policy. The contents of the file will be limited to a known text pattern to ensure that the text pattern will be present in all encryption/decryption operations performed by the TOE. <h:br/><h:br/>  <h:br/><h:br/> 2. Exit the file editor so that the file (including its known text pattern) has "completed the decryption/encryption operation" and process memory containing the known text pattern is released. <h:br/><h:br/>  <h:br/><h:br/> 3. The evaluator will take a dump of volatile memory and search the retrieved dump for the known pattern. The test fails if the known plaintext pattern is found in the memory dump. <h:br/><h:br/>  <h:br/><h:br/> 4. The evaluator will search the underlying non-volatile storage for the known pattern. The test fails if the known plaintext pattern is found in the search. <h:br/><h:br/>  <h:br/><h:br/> </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fdp-prt-ext-1e2">
            <title> The TSF shall  <selectables><selectable id="fdp_prt_ext.1.2_1">invoke platform-provided functionality</selectable><selectable id="fdp_prt_ext.1.2_2">implement functionality</selectable></selectables>  to ensure that all sensitive data created by the TOE when
              decrypting/encrypting the user-selected file (or set of files) are destroyed in
              volatile and non-volatile memory when the data is no longer needed according to FCS_CKM.6. </title>
            <note role="application"> The intent is that the TSF controls the use and clearing of any data
              that it manipulates that is not needed by the user (e.g. a temporary file created in non-volatile
              memory during the encryption/decryption process would be destroyed as soon as the process is completed).
              This should not prevent expected usage (e.g. the TOE may create a decrypted copy of a file as requested
              by the user). The TSF is also not responsible for temporary files that  non-TSF application creates 
              (for example, a text editor may create a "checkpoint" file when editing a file that is protected by the TOE;
              the TOE does not have to try to keep track of or clean up these "checkpoint" files). An optional
              requirement on cleaning up the temporary files created by non-TSF application when operating on
              files protected by the TOE is FDP_PRT_EXT.3.1.

            While these data sets are not keys, they can follow the same deletion procedures described in FCS_CKM.6.</note>
          </f-element>
        </f-component>
        <!-- FDP_PRT_EXT.2 Destruction of Plaintext Data -->
        <f-component cc-id="fdp_prt_ext.2" id="fdp-prt-ext-2" name="Destruction of Plaintext Data">
          <consistency-rationale>This SFR relates to the destruction of key data, which is beyond the scope defined by the Base-PP and does not affect the ability of the Base-PP 
           SFRs to be enforced.
          </consistency-rationale>
          <comp-lev> requires the TOE to destroy any plaintext data that is created as a result of the encryption/decryption process for sensitive data.</comp-lev>
          <management>There are no specific management functions identified.
          </management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FCS_CKM.6 Timing and event of cryptographic key destruction<h:br/>
          FDP_PRT_EXT.1 Protection of Selected User Data</dependencies>
          <f-element id="fdp-prt-ext-2e1">
            <title>The TSF shall  <selectables><selectable id="fdp_prt_ext.2.1_1">invoke platform-provided functionality</selectable><selectable id="fdp_prt_ext.2.1_2">implement functionality</selectable></selectables>  to ensure that all original plaintext data created when
            decrypting/encrypting the user-selected file (or set of files) are destroyed in volatile
            and non-volatile memory according to FCS_CKM.6 upon completion of the decryption/encryption operation.
          </title>
            <note role="application"> This is the primary requirement for encrypting and decrypting
            the protected resources (file or set of files). <h:br/><h:br/>

            For FDP_PRT_EXT.2.1, the intent is that the TSF controls the use and clearing of any data that it manipulates. It
            needs to ensure that no plaintext data from encrypted resources
            remains after the TSF has finished operating on that resource. In the context of
            FDP_PRT_EXT.2.1, the TSF has completed the decryption operation after it has decrypted
            the file or set of files for use by an application, and completed the encryption
            operation after it has encrypted the file or set of files for storage in the file
            system. <h:br/><h:br/>

            While these data sets are not keys, they can follow the same deletion procedures described in FCS_CKM.6.
          </note>
            <aactivity level="component">
              <TSS>The evaluator shall
            examine the TSS to ensure that it describes all temporary file (or set of files) that
            are created in the filesystem of the host during the decryption/encryption process, and
            that the TSS describes how these files are deleted after the TSF is done with its
            decryption/encryption operation. Note that if other objects/resources are created on the
            host that are 1) persistent and 2) visible to other processes (users) on that host that
            are not filesystem objects, those objects shall be identified and described in the TSS
            as well. <h:br/><h:br/>None.<h:br/><h:br/></TSS>
              <Guidance> None. <h:br/><h:br/></Guidance>
              <Tests>
                <testlist>
                  <test>If the TSS creates temporary files/resources during file decryption/encryption, the evaluator shall perform the following tests to verify that the temporary files/resources are destroyed. If the product supported shared files per FIA_FCT_EXT.2, this test must be repeated with a shared file. The evaluator shall use a tool (e.g., procmon for a Windows system) that is capable of monitoring the creation and deletion of files during the decryption/encryption process is performed. A tool that can search the contents of the hard drive (e.g., winhex) will also be needed. The tools used to perform the monitoring shall be identified in the test report. <h:br/><h:br/> (Creating an encrypted document) <h:ul><h:li>Open an editing application.</h:li> <h:li>Create a special string inside the document. The string could be 5-10 words. It is
                    recommended to remove the spaces. This will create a one page document.</h:li> <h:li>Start the file monitoring tool.</h:li> <h:li>Save and close the file.</h:li> <h:li>Encrypt the file using the TOE (if the TOE does not encrypt automatically for the
                    user).</h:li></h:ul>  <h:br/><h:br/>  <h:b>Analysis Steps </h:b>  <h:ul><h:li>If needed, exit/close the TOE.</h:li> <h:li>Stop the file monitoring tool. View the results. Identify any temporary files that
                      were created during the encryption process. Examine to see if the temporary files
                      were destroyed when the TOE closed. </h:li> <h:li>If temporary files remain, these temporary files should be examined to ensure that
                      no plaintext data remains. If plaintext data is found in these files, the test fails.</h:li> <h:li>Search the contents of the hard drive (using the second tool) for the plaintext
                      string used above. (The search should be performed using both ASCII and Unicode
                      formats.)</h:li> <h:li>If the string is found, this means that plaintext from the test fails. </h:li><h:br/></h:ul> (Creating, encrypting a blank document and then adding text): <h:ul><h:li>Encrypt a blank document using the tool.</h:li> <h:li>Create a special string inside the document. The string could be 5-10 words. It is
                      recommended to remove the spaces. This will create a one page document.</h:li> <h:li>Start the file monitoring tool.</h:li> <h:li>Save and close the file. </h:li> <h:li>Perform the "Analysis Steps" listed above.</h:li></h:ul>  <h:br/><h:br/> </test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.3 Identification and Authentication (FIA) -->
      <section title="Identification and Authentication (FIA)" id="fia">
        <ext-comp-def title="Authorization" fam-id="FIA_AUT_EXT">
          <fam-behavior>Components in this family define requirements for how subject authorization is performed. Where FIA_UAU in CC Part 2 defines circumstances where authentication is required, this family describes the specific computational methods used to determine whether a subject’s presented authentication data is valid.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Authorization Factors" fam-id="FIA_FCT_EXT">
          <fam-behavior>Components in this family define requirements for the use of alternative authorization factors for users to access protected data.</fam-behavior>
        </ext-comp-def>
        <!-- FIA_AUT_EXT.1 Subject Authorization -->
        <f-component cc-id="fia_aut_ext.1" id="fia-aut-ext-1" name="Subject Authorization">
          <consistency-rationale>This SFR defines how user requests to access protected data are authorized. It uses FCS_RBG_EXT.1 from the Base-PP in a manner consistent with its 
            definition, but otherwise does not relate to functionality defined by the Base-PP.
          </consistency-rationale>
          <comp-lev> specifies the manner in which the TSF performs user authorization.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT: <h:ul><h:li>Configuration of authentication factors.</h:li></h:ul></management>
          <audit>The following actions should be auditable if FAU_GEN Security audit data
            generation is included in the PP/ST:<h:ul><h:li>Minimal: Failure of authorization function.</h:li><h:li>Basic: All use of authorization function.</h:li></h:ul></audit>
          <dependencies>FCS_CKM_EXT.6 Cryptographic Password/Passphrase Conditioning<h:br/>
            FCS_RBG_EXT.1 Random Bit Generation Services</dependencies>
          <f-element id="fia-aut-ext-1e1">
            <title>The TSF shall 
               <selectables><selectable id="PLATAUTH">implement platform-provided functionality to provide user authorization</selectable><selectable id="APPAUTH">provide user authorization</selectable></selectables>  based on 
               <selectables><selectable id="USEPAS">a password authorization factor conditioned as defined in FCS_CKM_EXT.6</selectable><selectable id="USECAR">an external smart card factor that is at least the same bit-length as the FEK(s), and is protecting a submask that is <selectables><selectable id="fia_aut_ext.1.1_1">generated by the TOE (using the RBG as specified in FCS_RBG_EXT.1 (from <xref to="bibAppPP"/>))</selectable><selectable id="fia_aut_ext.1.1_2">generated by the platform</selectable></selectables> protected using assymetric keys as defined in FCS_CKM.1.1/AK (from <xref to="bibAppPP"/>) with user presence proved by presentation of the smart card and <selectables><selectable id="fia_aut_ext.1.1_3">no PIN</selectable><selectable id="fia_aut_ext.1.1_4">an OE defined PIN</selectable><selectable id="fia_aut_ext.1.1_5">a configurable PIN</selectable></selectables> </selectable><selectable id="fia_aut_ext.1.1_6">an external USB token factor that is at least the same security strength as the FEK(s), and is providing a submask generated by the <selectables><selectable id="fia_aut_ext.1.1_7">TOE (using the RBG as specified in FCS_RBG_EXT.1 (from <xref to="bibAppPP"/>))</selectable><selectable id="fia_aut_ext.1.1_8">platform</selectable></selectables> </selectable></selectables>.
            </title>
            <ext-comp-def-title><title>The TSF shall 
              <selectables><selectable id="PLATAUTH">implement platform-provided functionality to provide user
                  authorization</selectable><selectable id="APPAUTH">provide user authorization</selectable></selectables> based on 
              <selectables><selectable id="USEPAS"> a password authorization factor conditioned as defined in FCS_CKM_EXT.6</selectable><selectable id="USECAR">an external smart card factor that is at least the same bit-length as the FEK(s), and is protecting a submask that is 
                   <selectables><selectable>generated by the TOE (using the RBG as specified in FCS_RBG_EXT.1)</selectable><selectable>generated by the platform</selectable></selectables> protected using assymetric keys as defined in FCS_CKM.1.1/AK (from <xref to="bibAppPP"/>) with user presence proved by presentation of the smart card and 
                  <selectables><selectable>no PIN</selectable><selectable>an OE defined PIN</selectable><selectable>a configurable PIN</selectable></selectables></selectable><selectable>an external USB token factor that is at least the same security strength as the FEK(s),
                   and is providing a submask generated by the 
                   <selectables><selectable>TOE (using the RBG as specified in FCS_RBG_EXT.1)</selectable><selectable>platform</selectable></selectables></selectable></selectables>.
            </title></ext-comp-def-title>
            <note role="application">
			  
			  If the ST author selects "provide user authorization", the selection-based requirement FCS_VAL_EXT.2 must also be claimed.<h:br/><h:br/>
              
              This requirement specifies what authorization factors the TOE accepts
             from the user. A password entered by the user is one authorization factor that the TOE must 
             be able to condition, as specified in FCS_CKM_EXT.6. Another option is a smart card
             authorization factor, with the differentiating feature being how the value is generated - either
             by the TOE's RBG or by the platform. An external USB token may also be used, with the
             submask value generated either by the TOE's RBG or by the platform.<h:br/><h:br/>
             The TOE may accept any number of authorization factors, and these are categorized as
             "submasks". The ST author selects the authorization factors they support, and there may be
             multiple methods for a selection.<h:br/><h:br/>
             Use of multiple authorization factors is preferable; if more than one authorization factor is
             used, the submasks produced must be combined using FCS_SMC_EXT.1. </note>
            <aactivity level="component">
              The evaluation activities for this component will be driven by the selections
              made by the ST author. This section describes evaluation activities for all possible
              selections in an ST; it should be understood that if a capability is not selected in
              the ST, the noted evaluation activity does not need to be performed. <h:br/><h:br/>
              <TSS>The
              evaluator shall examine the TSS to ensure that it describes how user authentication is
              performed. The evaluator shall verify that the authorization methods listed in the TSS
              are specified and included in the requirements in the ST. <h:br/><h:br/><h:b>Requirement met by the TOE</h:b><h:br/> The evaluator shall first examine the TSS to ensure that the authorization
              factors specified in the ST are described. For password-based factors the
              examination of the TSS section is performed as part of FCS_CKM_EXT.6
              Evaluation Activities. Additionally in this case, the evaluator shall verify that
              the operational guidance discusses the characteristics of external authorization
              factors (e.g., how the authorization factor must be generated; format(s) or
              standards that the authorization factor must meet) that are able to be used by
              the TOE.
              If other authorization factors are specified, then for each factor, the TSS specifies
              how the factors are input into the TOE.<h:br/><h:br/><h:b>Requirement met by the platform</h:b><h:br/> The evaluator shall examine the TSS to
              ensure a description is included for how the TOE is invoking the platform
              functionality and how it is getting an authorization value that has appropriate
              entropy.<h:br/><h:br/>
              None. <h:br/><h:br/></TSS>
              <Guidance>The evaluator shall verify that the AGD guidance includes instructions for all of the
              authorization factors. The AGD will discuss the characteristics of external
              authorization factors (e.g., how the authorization factor is generated; format(s) or
              standards that the authorization factor must meet, configuration of the TPM device
              used) that are able to be used by the TOE.<h:br/><h:br/></Guidance>
              <Tests>The evaluator shall ensure that authorization using each selected method is tested during the course of the evaluation, setting up the method as described in the operational guidance and ensuring that authorization is successful and that failure to provide an authorization factor results in denial to access to plaintext data. <h:br/> <h:br/>[conditional]: If there is more than one authorization factor, ensure that failure to supply a required authorization factor does not result in access to the decrypted plaintext data.</Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.4 Security Management (FMT) -->
      <section title="Security Management (FMT)" id="fmt">
        <!-- FMT_SMF.1/FE Specification of File Encryption Management
          Functions -->
        <f-component cc-id="fmt_smf.1" id="fmt-smf-1-fe" name="Specification of File Encryption Management           Functions" iteration="FE">
          <consistency-rationale>This SFR defines management functions for the TOE for functionality specific to this PP-Module. These functions are defined in addition to what 
            the Base-PP defines for its own operation.
          </consistency-rationale>
          <f-element id="fmt_smf-1-1_FE">
            <title>The TSF shall be capable of performing the following management functions:  <h:b> <selectables linebreak="yes"><selectable id="fmt_smf.1.1_FE_1">configure cryptographic functionality</selectable><selectable id="fmt_smf.1.1_FE_2">change authentication factors</selectable><selectable id="fmt_smf.1.1_FE_3">perform a cryptographic erase of the data by the destruction of FEKs or KEKs protecting the FEKs as described in FCS_CKM.6.2</selectable><selectable id="fmt_smf.1.1_FE_4">configure the number of failed validation attempts required to trigger corrective behavior</selectable><selectable id="fmt_smf.1.1_FE_5">configure the corrective behavior to issue in the event of an excessive number of failed validation attempts</selectable><selectable id="fmt_smf.1.1_FE_6">disable cryptographic functionality</selectable><selectable id="fmt_smf.1.1_FE_8"><assignable>other management functions provided by the TSF</assignable></selectable></selectables> </h:b>.
            </title>
            <note role="application">
              
              The intent of this requirement is to express the management
              capabilities that may be included in the TOE. Several common options are given:<h:br/><h:ul><h:li>If the TOE provides configurability of the cryptographic functions (for example,
                  key size of the FEK)-even if the configuration is the form of parameters that may
                  be passed to cryptographic functionality implement on the TOE platform--then
                  "configure cryptographic functionality" will be included, and the specifics of the
                  functionality offered can either be written in this requirement as bullet points,
                  or included in the TSS.</h:li> <h:li>If the TOE uses stored FEKS or KEKs(the FEK is not directly derived from a password)
                  , then "perform a cryptographic erase of the data by the destruction of FEKs or KEKs protecting the FEKs as described in FCS_CKM.6.2" will be included. 
                  This function should be able to be triggered by a user or admin and may be triggered by uninstallation.</h:li> <h:li>If "other management functions" are assigned, a validation authority must be
                  consulted to ensure the evaluation activities and other functionality requirements
                  that may be needed are appropriately specified so that the ST can claim
                  conformance to this PP-Module.</h:li></h:ul><h:br/>
              This list is in addition to the list of functions as specified in, FMT_SMF.1 in the AppPP.
            </note>
            <aactivity level="component">
              
              The evaluation activities for this component will be driven by the selections
              made by the ST author. This section describes evaluation activities for all possible
              selections in an ST; it should be understood that if a capability is not selected in
              the ST, the noted evaluation activity does not need to be performed. The following
              sections are divided up into "Required Activities" and "Conditional Activities" for
              ease of reference. <h:br/><h:br/>
              
              If password or passphrase authorization factors are implemented by the TOE, then the appropriate 
              "change" selection must be included.<h:br/><h:br/>
              
              If the TOE provides configurability of the cryptographic functions (for example, key size of the FEK)-
              even if the configuration is the form of parameters that may be passed to cryptographic functionality implemented on
              the TOE platform--then "configure cryptographic functionality" will be included, and the specifics 
              of the functionality offered can either be written in this requirement as bullet points, or included in the TSS.<h:br/><h:br/>
              
              If "other management functions" are assigned, a validation authority must be consulted to ensure the 
              evaluation activities and other functionality requirements that may be needed are appropriately 
              specified so that the ST can claim conformance to this PP-Module.<h:br/><h:br/>
              The evaluation activities for this component will be driven by the selections
              made by the ST author. This section describes evaluation activities for all possible
              selections in an ST; it should be understood that if a capability is not selected in
              the ST, the noted evaluation activity does not need to be performed. The following
              sections are divided up into "Required Activities" and "Conditional Activities" for
              ease of reference. <h:br/><h:br/>
              
              If password or passphrase authorization factors are implemented by the TOE, then the appropriate 
              "change" selection must be included.<h:br/><h:br/>
              
              If the TOE provides configurability of the cryptographic functions (for example, key size of the FEK)-
              even if the configuration is the form of parameters that may be passed to cryptographic functionality implemented on
              the TOE platform--then "configure cryptographic functionality" will be included, and the specifics 
              of the functionality offered can either be written in this requirement as bullet points, or included in the TSS.<h:br/><h:br/>
              
              If "other management functions" are assigned, a validation authority must be consulted to ensure the 
              evaluation activities and other functionality requirements that may be needed are appropriately 
              specified so that the ST can claim conformance to this PP-Module.<h:br/><h:br/>
              The evaluation activities for this component will be driven by the selections
              made by the ST author. This section describes evaluation activities for all possible
              selections in an ST; it should be understood that if a capability is not selected in
              the ST, the noted evaluation activity does not need to be performed. The following
              sections are divided up into "Required Activities" and "Conditional Activities" for
              ease of reference. <h:br/><h:br/>
              
              If password or passphrase authorization factors are implemented by the TOE, then the appropriate 
              "change" selection must be included.<h:br/><h:br/>
              
              If the TOE provides configurability of the cryptographic functions (for example, key size of the FEK)-
              even if the configuration is the form of parameters that may be passed to cryptographic functionality implemented on
              the TOE platform--then "configure cryptographic functionality" will be included, and the specifics 
              of the functionality offered can either be written in this requirement as bullet points, or included in the TSS.<h:br/><h:br/>
              
              If "other management functions" are assigned, a validation authority must be consulted to ensure the 
              evaluation activities and other functionality requirements that may be needed are appropriately 
              specified so that the ST can claim conformance to this PP-Module.<h:br/><h:br/>
              The evaluation activities for this component will be driven by the selections
              made by the ST author. This section describes evaluation activities for all possible
              selections in an ST; it should be understood that if a capability is not selected in
              the ST, the noted evaluation activity does not need to be performed. The following
              sections are divided up into "Required Activities" and "Conditional Activities" for
              ease of reference. <h:br/><h:br/>
              
              If password or passphrase authorization factors are implemented by the TOE, then the appropriate 
              "change" selection must be included.<h:br/><h:br/>
              
              If the TOE provides configurability of the cryptographic functions (for example, key size of the FEK)-
              even if the configuration is the form of parameters that may be passed to cryptographic functionality implemented on
              the TOE platform--then "configure cryptographic functionality" will be included, and the specifics 
              of the functionality offered can either be written in this requirement as bullet points, or included in the TSS.<h:br/><h:br/>
              
              If "other management functions" are assigned, a validation authority must be consulted to ensure the 
              evaluation activities and other functionality requirements that may be needed are appropriately 
              specified so that the ST can claim conformance to this PP-Module.<h:br/><h:br/>
              <TSS>Conditional Activities: For all selected events,the evaluator shall examine the TSS to ensure that it
                describes the sequence of activities that take place from an implementation
                perspective when this activity is performed (for example, how it determines which
                resources are associated with the KEK, the decryption and re-encryption process), and
                ensure that the KEK and FEK are not exposed during this change. <h:br/><h:br/>
                Cryptographic Configuration: None for this requirement. <h:br/><h:br/>
                None. <h:br/><h:br/></TSS>
              <Guidance>
                Conditional Activities: The evaluator shall examine the Operational Guidance for each included selection
                to ensure that it either requires no configuration or describes how the functionality is configured.<h:br/><h:br/>
                Cryptographic Configuration: The evaluator shall determine from the TSS for
                other requirements (FCS_*, FDP_PRT_EXT, FIA_AUT_EXT) what portions of the
                cryptographic functionality are configurable. The evaluator shall then review the AGD
                documentation to determine that there are instructions for manipulating all of the
                claimed mechanisms. <h:br/><h:br/></Guidance>
              <Tests>Cryptographic Erase: If the TOE uses stored FEKS or KEKs, the evaluator shall examine the key chain to determine that the keys destroyed by a cryptographic erase will result in the data becoming unrecoverable. Testing for this activity is performed for other components in this PP-Module.</Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.5 Protection of the TSF (FPT) -->
      <section title="Protection of the TSF (FPT)" id="fpt">
        <ext-comp-def title="Protection of Key and Key Material" fam-id="FPT_KYP_EXT">
          <fam-behavior>Components in this family define requirements for secure storage of keys.</fam-behavior>
        </ext-comp-def>
        <!-- FPT_KYP_EXT.1 Protection of Keys and Key Material -->
        <f-component cc-id="fpt_kyp_ext.1" id="fpt-kyp-ext-1" name="Protection of Keys and Key Material">
          <consistency-rationale>The Base-PP defines an SFR for secure storage of sensitive data. This SFR expands on that definition by describing the supported logical methods 
            for storage of key data.
          </consistency-rationale>
          <comp-lev> requires the TSF to protect stored key data in a specified manner.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT: <h:ul><h:li>Configuration of the cryptographic functionality.</h:li></h:ul></management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FCS_COP.1 Cryptographic Operation<h:br/>
          FCS_KDF_EXT.1 Cryptographic Key Derivation Function<h:br/>
          FCS_KYC_EXT.1 Key Chaining and Key Storage<h:br/>
          FCS_SMC_EXT.1 Submask Combining<h:br/>
          FCS_STO_EXT.1 Storage of Credentials</dependencies>
          <f-element id="fpt-kyp-ext-1e1">
            <title>The TSF shall 
               <selectables><selectable id="fpt_kyp_ext.1.1_1">not store keys in non-volatile memory</selectable><selectable id="fpt_kyp_ext.1.1_2">store keys in non-volatile memory only when <selectables linebreak="yes"><selectable id="fpt_kyp_ext.1.1_3">wrapped, as specified in FCS_COP.1/KW</selectable><selectable id="fpt_kyp_ext.1.1_4">encrypted, as specified in FCS_COP.1/KE</selectable><selectable id="fpt_kyp_ext.1.1_5">the plaintext key is stored in the underlying platform's keystore as specified by FCS_STO_EXT.1.1 (from <xref to="bibAppPP"/>)</selectable><selectable id="fpt_kyp_ext.1.1_6">the plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1.</selectable><selectable id="fpt_kyp_ext.1.1_7">the plaintext key will no longer provide access to the encrypted data after initial provisioning</selectable><selectable id="fpt_kyp_ext.1.1_8">the plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1 and another contribution to the split is <selectables linebreak="yes"><selectable id="fpt_kyp_ext.1.1_9">wrapped as specified in FCS_COP.1/KW</selectable><selectable id="fpt_kyp_ext.1.1_10">encrypted as specified in FCS_COP.1/KE</selectable><selectable id="fpt_kyp_ext.1.1_11">derived as specified in FCS_KDF_EXT.1.1 and not stored in non-volatile memory</selectable><selectable id="fpt_kyp_ext.1.1_12">supplied by the enterprise management server</selectable></selectables> </selectable><selectable id="fpt_kyp_ext.1.1_13">the plaintext key is stored on an external storage device for use as an authorization factor.</selectable><selectable id="fpt_kyp_ext.1.1_14">the plaintext key is used to encrypt a key as specified in FCS_COP.1/KE or wrap a key as specified in FCS_COP.1/KW that is already encrypted as specified in FCS_COP.1/KE or wrapped as specified in FCS_COP.1/KW</selectable></selectables> </selectable></selectables>.
            </title>
            <ext-comp-def-title><title>The TSF shall 
              <selectables><selectable>not store keys in non-volatile memory</selectable><selectable>store keys in non-volatile memory only when
                  <selectables linebreak="yes"><selectable>wrapped, as specified in FCS_COP.1</selectable><selectable>encrypted, as specified in FCS_COP.1</selectable><selectable>the plaintext key is stored in the underlying platform's keystore as specified by FCS_STO_EXT.1.1</selectable><selectable>the plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1.</selectable><selectable>the plaintext key will no longer provide access to the encrypted data after initial provisioning</selectable><selectable>the plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1 and another contribution to the split is
                     <selectables linebreak="yes"><selectable>wrapped as specified in FCS_COP.1</selectable><selectable>encrypted as specified in FCS_COP.1</selectable><selectable>derived as specified in FCS_KDF_EXT.1.1 and not stored in non-volatile memory</selectable><selectable>supplied by the enterprise management server</selectable></selectables></selectable><selectable>the plaintext key is stored on an external storage device for use as an authorization factor.</selectable><selectable>the plaintext key is used to encrypt a key as specified in FCS_COP.1 or wrap a key as specified in FCS_COP.1 
                      that is already encrypted as specified in FCS_COP.1 or wrapped as specified in FCS_COP.1</selectable></selectables></selectable></selectables>.
            </title></ext-comp-def-title>
            <note role="application">
              
              The plaintext key storage in non-volatile memory is allowed for
              several reasons. If the keys exist within protected memory that is not user accessible
              on the TOE or OE, the only methods that allow it to play a security relevant role for
              protecting the FEK is if it is a key split or providing additional layers of wrapping
              or encryption on keys that have already been protected. </note>
            <aactivity level="component">
              <TSS>The evaluator shall verify the TSS for a high level description of the method(s) used
              to protect keys stored in non-volatile memory.<h:br/><h:br/>The evaluator shall verify
              the KMD to ensure it describes the storage location of all keys and the protection of
              all keys stored in non-volatile memory. The description of the key chain shall be
              reviewed to ensure FCS_COP.1/KW is followed for the storage of wrapped or encrypted
              keys in non-volatile memory and plaintext keys in non-volatile memory meet one of the
              criteria for storage. <h:br/><h:br/></TSS>
              <Guidance> None. <h:br/><h:br/></Guidance>
              <Tests>None.</Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
    </man-sfrs>
    <opt-sfrs>
      <!-- 5.2.6 Cryptographic Support (FCS) -->
      <section title="Cryptographic Support (FCS)" id="fcs">
        <ext-comp-def title="Cryptographic Operation" fam-id="FCS_COP_EXT">
          <fam-behavior>Components in this family define requirements for cryptographic operations specific to file encryption.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Key Derivation Function" fam-id="FCS_KDF_EXT">
          <fam-behavior>Components in this family define requirements for the implementation of cryptographic key derivation functions</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Submask Combining" fam-id="FCS_SMC_EXT">
          <fam-behavior>Components in this family define requirements for generation of intermediate keys via submask combining.</fam-behavior>
        </ext-comp-def>
        <!-- FCS_CKM_EXT.5 File Authentication Key (FAK) Support -->
        <f-component cc-id="fcs_ckm_ext.5" id="fcs-ckm-ext-5" name="File Authentication Key (FAK) Support">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR supports the PP-Module's data authentication function, which does not relate to any functionality defined in the Base-PP.
          </consistency-rationale>
          <comp-lev> describes the secure storage of file encryption keys.</comp-lev>
          <management>There are no specific management functions identified.
          </management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FCS_COP_EXT.1 FAK Encryption/Decryption Support<h:br/>
            FCS_RBG_EXT.1 Random Bit Generation Services<h:br/>
            FDP_AUT_EXT.2 Data Authentication Using Cryptographic Keyed-Hash Functions
          </dependencies>
          <f-element id="fcs-ckm-ext-5e1">
            <title> The TSF shall use a FAK to authenticate sensitive data when a cryptographic, keyed
              hashing function is used for data authentication and shall be supported in the following
              manner:  <selectables linebreak="yes"><selectable id="fcs_ckm_ext.5.1_1">A FAK conditioned from a password/passphrase shall never be stored in non-volatile memory</selectable><selectable id="fcs_ckm_ext.5.1_2">a FAK will be stored in non-volatile memory encrypted with a KEK as specified in FCS_COP.1<h:b>/KW</h:b> using authorization factors as specified in FIA_AUT_EXT.1</selectable></selectables>.
            </title>
            <ext-comp-def-title><title> The TSF shall use a FAK to authenticate sensitive data when a cryptographic, keyed
              hashing function is used for data authentication and shall be supported in the following
              manner: <selectables linebreak="yes"><selectable>A FAK conditioned from a password/passphrase shall never be stored in
                  non-volatile memory</selectable><selectable>a FAK will be stored in non-volatile memory encrypted with a KEK as
                  specified in FCS_COP.1 using authorization factors as specified in FIA_AUT_EXT.1</selectable></selectables>.
            </title></ext-comp-def-title>
            <aactivity level="component">
              <TSS>FCS_CKM_EXT.5.1: The evaluator shall examine the TSS to determine how the FAK is stored (or not stored) in memory.
                <h:br/><h:br/> 
                
                FCS_CKM_EXT.5.2: The evaluator shall examine the TSS to determine that it
                describes how a FAK is created for a protected resource and associated with that
                resource; protection of the FAK itself is covered by FCS_COP_EXT.1. The evaluator
                confirms that-per this description-the FAK is unique per resource (file or set of files)
                and that the FAK is created using a DRBG. <h:br/><h:br/>
                
                
                FCS_CKM_EXT.5.3: The TSS must detail that the FAKs are generated on the client machine
                and are not generated on an external server. <h:br/><h:br/> 
                
                FCS_CKM_EXT.5.4: FCS_CKM.6
                contains the requirements necessary to ensure that plaintext keys and key material do
                not remain in plaintext form in the TSF's non-volatile memory space. In TOEs where the
                FAK is protected with a KEK, the FAK will need to be encrypted and stored in
                non-volatile memory when not being used to decrypt/encrypt a file. (Typically, the
                encrypted FAK is stored in the meta-data of the encrypted file(s).) The evaluator shall
                examine the TSS to ensure that it describes how the FAK is encrypted, both after its
                initial creation and after it has been decrypted for use (note that in the entirely
                likely possibility that the FAK is not re-encrypted, then this case must be indicated in
                the TSS and the description for FCS_CKM.6 will cover disposal of the plaintext FEK
                and FAK). The evaluator shall further check to ensure that the TSS describes how the FAK
                and any other associated meta-data necessary to decrypt the file or set of files are
                associated with the resource. This description can be combined with the description
                required for FCS_COP_EXT.1. <h:br/><h:br/>
                None. <h:br/><h:br/></TSS>
              <Guidance> None. <h:br/><h:br/></Guidance>
              <Tests>An example ciphertext file generated via the TOE shall be provided to the evaluator with the accompanying FAK and prerequisite authorization information used for encryption. The evaluator will use the TOE in conjunction with a debugging or forensics utility to attempt an authentication of the ciphertext file using the provided authorization information. The evaluator will then terminate processing of the TOE and perform a search through non-volatile memory using the provided FAK string. The evaluator must document each command, program or action taken during this process, and must confirm that the FAK was never written to non-volatile memory. This test must be performed three times to ensure repeatability. If during the course of this testing the evaluator finds that the FAK was written to non-volatile memory, they should be able to identify the cause (i.e. the TOE wrote the FAK to disk, the TOE platform dumped volatile memory as a page file, etc.), and document the reason for failure to comply with the requirement.</Tests>
            </aactivity>
          </f-element>
          <f-element id="fcs-ckm-ext-5e2">
            <title>The TSF shall create a unique FAK for each file (or set of files) using the
              mechanism on the client as specified in FCS_RBG_EXT.1 (from  <xref to="bibAppPP"/>).</title>
            <ext-comp-def-title><title>The TSF shall create a unique FAK for each file (or set of files) using the
              mechanism on the client as specified in FCS_RBG_EXT.1.</title></ext-comp-def-title>
          </f-element>
          <f-element id="fcs-ckm-ext-5e3">
            <title>The FAKs must be generated by the TOE as specified in FDP_AUT_EXT.2.9.</title>
          </f-element>
          <f-element id="fcs-ckm-ext-5e4">
            <title>The TSF will not write FAKs to non-volatile memory.</title>
          </f-element>
          <f-element id="fcs-ckm-ext-5e5">
            <title>The FAK shall be protected in a manner conformant to FCS_COP_EXT.1.</title>
            <note role="application"> The intent of this requirement is to describe the different
              methods that a FAK can be created and formed. <h:br/><h:br/>FCS_CKM_EXT.5.1 details how a FAK is stored. <h:br/><h:br/>
              FCS_CKM_EXT.5.2 requires that each resource to be encrypted
              has a unique FAK, and that this FAK is generated by the TSF. If the encrypted resource
              is a set of files encrypted under one FAK, additional requirements on the initialization
              vectors and cipher modes must be adhered to in Section 4.2. </note>
          </f-element>
        </f-component>
        <!-- FCS_COP_EXT.1 FAK Encryption/Decryption Support -->
        <f-component cc-id="fcs_cop_ext.1" id="fcs-cop-ext-1" name="FAK Encryption/Decryption Support">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR defines usage of AES functionality not defined by the Base-PP. However, this functionality is only used in certain situations that are 
            specific to this PP-Module and do not affect the ability for any Base-PP SFRs to be enforced.
          </consistency-rationale>
          <comp-lev> defines requirements for how to protect a file encryption key.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT: <h:ul><h:li>Configuration of the cryptographic functionality.</h:li></h:ul></management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FCS_COP.1 Cryptographic Operation</dependencies>
          <f-element id="fcs-cop-ext-1e1">
            <title>The FAK shall be protected in the same manner as the FEK, in accordance with
              FCS_COP.1<h:b>/KW</h:b>.</title>
            <ext-comp-def-title><title>The FAK shall be protected in the same manner as the FEK, in accordance with
              FCS_COP.1.</title></ext-comp-def-title>
            <note role="application"> The intent of this requirement is to clarify that, if a FAK is
              to be used, it should be treated as sensitive as the FEK, and thus, follow the same
              encryption and decryption practices. </note>
            <aactivity level="component">
              <TSS>The evaluator shall follow the evaluation activities as laid out in
                FCS_COP.1/KW to assert proper FAK protection.<h:br/><h:br/>None.<h:br/><h:br/></TSS>
              <Guidance>None.<h:br/><h:br/></Guidance>
              <Tests>None.</Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.7 User Data Protection (FDP) -->
      <section title="User Data Protection (FDP)" id="fdp">
        <ext-comp-def title="Protection of Selected User Data" fam-id="FDP_PRT_EXT">
          <fam-behavior>Components in this family define requirements for the TOE's ability to protect sensitive data at rest.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="User Data Authentication" fam-id="FDP_AUT_EXT">
          <fam-behavior>Components in this family define requirements for authentication of protected user data.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Protection of Data in Power Managed States" fam-id="FDP_PM_EXT">
          <fam-behavior>Components in this family define requirements for the protection of data in cases where the host platform becomes locked or unpowered.</fam-behavior>
        </ext-comp-def>
        <!-- FDP_AUT_EXT.1 Authentication of Selected User Data -->
        <f-component cc-id="fdp_aut_ext.1" id="fdp-aut-ext-1" name="Authentication of Selected User Data">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR relates to data authentication, which does not relate to any functionality defined in the Base-PP.
           </consistency-rationale>
          <comp-lev> requires the TSF to support data authentication and to specify the particular data authentication method that is supported.</comp-lev>
          <management>There are no specific management functions identified.
           </management>
          <audit>The following actions should be auditable if FAU_GEN Security audit data
             generation is included in the PP/ST:<h:ul><h:li>Minimal: Failed authentication attempts.</h:li><h:li>Basic: All authentication attempts.</h:li></h:ul></audit>
          <dependencies>FDP_AUT_EXT.2 Data Authentication Using Cryptographic Keyed-Hash Functions<h:br/>
           FDP_AUT_EXT.3 Data Authentication Using Asymmetric Signing and Verification 
           </dependencies>
          <f-element id="fdp-aut-ext-1e1">
            <title>The TSF shall perform authentication of the user-selected file (or set of files)
               and provide notification to the user if modification had been detected. </title>
            <aactivity level="component">
              <TSS>The evaluator shall examine the TSS to determine that it lists each type of
                 resource that can be authenticated (e.g., file, directory) and what "authenticated"
                 means in terms of the resource (e.g., "authenticating a directory" means that all of the
                 files contained in the directory are authenticated, but the data in the directory itself
                 (which are filenames and pointers to the files) are not authenticated).<h:br/><h:br/>
                 
                 The evaluator
                 shall also confirm that the TSS describes how each type of resource listed is
                 authenticated by the TOE and how authentication measures are added to each resource
                 (e.g. taking all the encrypted files through a MAC function and appending the MAC to the
                 set of files). The evaluator shall ensure that this description includes the case where
                 an existing file or set of files has authentication measures added for the first time; a
                 new file or set of files is created and adds authentication measure; an existing file or
                 set of files updates or replaces its existing authentication measures (that is, it had a
                 MAC appended to the data; it was authenticated and decrypted (by the TOE) for use by the
                 user, and is then subsequently re-encrypted with an updated MAC); and corresponding
                 decryption scenarios. If other scenarios exist due to product implementation/features,
                 the evaluator shall ensure that those scenarios are covered in the TSS as well.<h:br/><h:br/>
                 None. <h:br/><h:br/></TSS>
              <Guidance>If the TOE creates temporary objects and these objects can be
                 protected through administrative measures (e.g., the TOE creates temporary files in a
                 designated directory that can be protected through configuration of its access control
                 permissions), then the evaluator shall check the Operational Guidance to ensure that
                 these measures are described. <h:br/><h:br/>
                 
                 If there are special measures necessary to configure
                 the method by which the file or set of files are authenticated (e.g., choice of function
                 used, additional keys, etc.), then those instructions shall be included in the
                 Operational Guidance and verified by the evaluator. This includes, for instance, lists
                 of allowed platforms, libraries, and devices, and instructions for using them. In these
                 cases, the evaluator checks to ensure that all non-TOE products used to satisfy the
                 requirements of the ST that are described in the Operational Guidance are consistent
                 with those listed in the ST, and those tested by the evaluation activities of this PP-Module.
                 <h:br/><h:br/></Guidance>
              <Tests>The evaluator shall also perform the following tests. These tests must be performed for each data authentication feature and platform claimed in the ST; all instructions for configuring the TOE and each of the environments must be included in the Operational Guidance and used to establish the test configuration. <h:br/> <h:br/>For each resource and data authentication scenario listed in the TSS, the evaluator shall ensure that the TSF is able to successfully add authentication measures and authenticate the resource using the following methodology. <h:br/> <h:br/>Monitor the temporary resources being created (if any) and deleted by the TSF-the tools used to perform the monitoring (e.g., procmon for a Windows system) shall be identified in the test report. The evaluator shall ensure that these resources are consistent with those identified in the TSS, and that they are protected as specified in the Operational Guidance and are deleted when the decryption/encryption and authentication operations are completed.</Tests>
            </aactivity>
          </f-element>
          <f-element id="fdp-aut-ext-1e2">
            <title> The TSF shall implement a data authentication method based on  <selectables><selectable id="fdp_aut_ext.1.2_1">cryptographic keyed hashing service and verification in accordance with FDP_AUT_EXT.2</selectable><selectable id="fdp_aut_ext.1.2_2">asymmetric signing and verification in accordance with FDP_AUT_EXT.3</selectable></selectables>. </title>
            <note role="application">This is the primary requirement for authentication of the
               protected resources (files and sets of files). It is highly encouraged for vendors to
               utilize a keyed hashing service or asymmetric signing mechanism to ensure data
               authentication, as these are the only two implementations noted in this PP-Module that prevent
               decryption if authentication is unsuccessful. Using modes such as XTS or CBC will
               require additional data authentication measures to be added, such as a keyed hash
               function or asymmetric signing, because these modes do not come inherently packaged with
               data authentication or a way to signal to the user that data has been modified.<h:br/>
               
               Specific tests are performed in FDP_AUT_EXT.2 or FDP_AUT_EXT.3 depending on the selection made in FDP_AUT_EXT.1.2.
             </note>
          </f-element>
        </f-component>
        <!-- FDP_AUT_EXT.2 Data Authentication Using cryptographic
               Keyed-Hash Functions -->
        <f-component cc-id="fdp_aut_ext.2" id="fdp-aut-ext-2" name="Data Authentication Using cryptographic                Keyed-Hash Functions">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR relies on cryptographic functionality defined by the Base-PP. However, the function itself does not relate to any behavior 
             defined in the Base-PP.
           </consistency-rationale>
          <comp-lev> requires the TOE to implement data authentication using a keyed hash function with a FAK as its key.</comp-lev>
          <management>There are no specific management functions identified.
           </management>
          <audit>There are no auditable events foreseen.
           </audit>
          <dependencies>FCS_CKM_EXT.5 File Authentication Key (FAK) Support<h:br/>
             FCS_COP.1 Cryptographic Operation<h:br/>
             FCS_COP_EXT.1 FAK Encryption/Decryption Support<h:br/>
             FCS_RBG_EXT.1 Random Bit Generation Services<h:br/></dependencies>
          <f-element id="fdp-aut-ext-2e1">
            <title>The TSF shall use a cryptographic, keyed hash function in accordance with
               FCS_COP.1<h:b>/KeyedHash</h:b> (from  <xref to="bibAppPP"/>).</title>
            <ext-comp-def-title><title>The TSF shall use a cryptographic, keyed hash function in accordance with
               FCS_COP.1.</title></ext-comp-def-title>
            <aactivity level="component">
              <TSS>The evaluator shall check the TSS section to confirm that it describes
                 how a request for each type of supported resource (file (or set of files)) will result
                 in data authentication using a keyed hash function. The evaluator will confirm that the
                 TOE will respond appropriately to a failed authentication, to include notifying the user
                 of an invalid authentication and preventing decryption. The evaluator will confirm that
                 any file encryption utility will be able to identify where the MAC is placed. <h:br/><h:br/>The
                 evaluator will confirm that a FAK is used as part of the authentication process and will
                 identify the keyed hash function utilized. <h:br/><h:br/>
                 Conditional:<h:br/>
                 If 'using a Random Bit Generator' was selected, the evaluator shall verify that the TSS describes
                 how the functionality described by FCS_RBG_EXT.1 (from the <xref to="bibAppPP"/>) is used to generate the FAK. <h:br/><h:br/>
                 Conditional:<h:br/>
                 If 'key generation methods compliant with NIST SP 800-133r2' was selected, the evaluator shall verify
                 that the TSS describes how the functionality described by NIST SP 800-33r1 is implemented to generate the FAK.
                 The evaluator shall verify that the description of the key generation method matches the methods described in
                 SP 800-133r2 and that the FAK is chained to an approved RBG. <h:br/><h:br/>
                 None. <h:br/><h:br/></TSS>
              <Guidance> It is encouraged for
                 every implementation to use a FAK that is wholly different and independently generated
                 from the FEK.<h:br/><h:br/></Guidance>
              <Tests>
                The evaluator shall perform the following test:
                <testlist>
                  <test>Create an encrypted file and confirm that authentication of this file using the correct FAK will result in a successful decryption.</test>
                  <test>Modify an arbitrary number of bits of ciphertext and attempt to run the authentication and decryption operations on the file. Assert that the TOE successfully identified the forged ciphertext file and notified the user.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fdp-aut-ext-2e2">
            <title>The TSF shall use a File Authentication Key (FAK) in accordance with FCS_COP_EXT.1
               and FCS_CKM_EXT.5 as the secret key to the keyed hash function.</title>
          </f-element>
          <f-element id="fdp-aut-ext-2e3">
            <title>The TSF shall use the entirety of the ciphertext file as the message input to the
               keyed hash function.</title>
          </f-element>
          <f-element id="fdp-aut-ext-2e4">
            <title>The TSF shall concatenate the output of the keyed hash function, the Message
               Authentication Code (MAC).</title>
          </f-element>
          <f-element id="fdp-aut-ext-2e5">
            <title>The TSF shall authenticate the encrypted file prior to decryption.</title>
          </f-element>
          <f-element id="fdp-aut-ext-2e6">
            <title>The TSF shall authenticate the data by comparing the keyed hash output of the
               ciphertext against the stored MAC.</title>
          </f-element>
          <f-element id="fdp-aut-ext-2e7">
            <title>The TSF shall notify the user of an unsuccessful authentication and prevent
               decryption of the ciphertext.</title>
          </f-element>
          <f-element id="fdp-aut-ext-2e8">
            <title>During verification, the TSF shall verify the MAC is at the end of the ciphertext
               file.</title>
          </f-element>
          <f-element id="fdp-aut-ext-2e9">
            <title>The FAK will be generated using 
               <selectables><selectable id="fdp_aut_ext.2.9_1">a RBG that meets FCS_RBG_EXT.1 (from <xref to="bibAppPP"/>)</selectable><selectable id="fdp_aut_ext.2.9_2">key generation methods compliant with NIST SP 800-133r2</selectable></selectables>.</title>
            <ext-comp-def-title><title>The FAK will be generated using 
              <selectables><selectable>a RBG that meets FCS_RBG_EXT.1</selectable><selectable>key generation methods compliant with NIST SP 800-133r2</selectable></selectables>.</title></ext-comp-def-title>
            <note role="application">The intent of this requirement is to specify the correct way of
               using a keyed hash function to authenticate the data, and enable authentication of data. 
               FAKs are considered cryptographic keys and are subject to destruction per FCS_CKM.6.</note>
          </f-element>
        </f-component>
        <!-- FDP_AUT_EXT.3 Data Authentication Using Asymmetric Signing
               and Verification -->
        <f-component cc-id="fdp_aut_ext.3" id="fdp-aut-ext-3" name="Data Authentication Using Asymmetric Signing                and Verification">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR relies on cryptographic functionality defined by the Base-PP. However, the function itself does not relate to any behavior 
             defined in the Base-PP.
           </consistency-rationale>
          <comp-lev> requires the TOE to implement data authentication using a cryptographic signature and hash.</comp-lev>
          <management>There are no specific management functions identified.
           </management>
          <audit>There are no auditable events foreseen.
           </audit>
          <dependencies>FCS_CKM.1 Cryptographic Key Generation<h:br/>
             FCS_COP.1 Cryptographic Operation
           </dependencies>
          <f-element id="fdp-aut-ext-3e1">
            <title>The TSF shall use a secure hash function in accordance with FCS_COP.1<h:b>/Hash</h:b> (from 
                <xref to="bibAppPP"/>) with the entire ciphertext file as input to create a
               hash.</title>
            <ext-comp-def-title><title>The TSF shall use a secure hash function in accordance with FCS_COP.1 with the entire ciphertext file as input to create a
               hash.</title></ext-comp-def-title>
            <aactivity level="component">
              <TSS>The evaluator shall check the TSS section to confirm that it describes
                 how a request for each type of supported resource (file (or set of files)) will result
                 in data authentication using a secure hash and cryptographic signing process. The
                 evaluator will confirm that the supplied public and private key pair were generated in
                 accordance with FCS_CKM.1(1). The evaluator will confirm that the entire ciphertext file
                 was used to create the hash and that the hash was used as input to the cryptographic
                 signing function. The evaluator will confirm that the TSF notifies the user of an
                 unsuccessful authentication and prevents decryption.  The evaluator shall confirm
                 that the signature is appended to the end of the ciphertext file.<h:br/><h:br/>
                 None. <h:br/><h:br/></TSS>
              <Guidance> None.<h:br/><h:br/></Guidance>
              <Tests>
                The evaluator shall perform the following test:
                <testlist>
                  <test>Create an encrypted file and demonstrate that authentication of this file using the correct keying material will be successful.</test>
                  <test>Modify an arbitrary number of bits of ciphertext and attempt to run the authentication and decryption operations on the file. Assert that the TOE successfully identified the forged ciphertext file and notified the user.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fdp-aut-ext-3e2">
            <title>The TSF shall use a cryptographic signing function in accordance with FCS_COP.1<h:b>/SigGen</h:b>
                (from  <xref to="bibAppPP"/>) and must use the hash generated in accordance with
               FDP_AUT_EXT.3.1 as input to the signing process. Additionally, use of ephemeral key for
               signing purposes is prohibited.</title>
            <ext-comp-def-title><title>The TSF shall use a cryptographic signing function in accordance with FCS_COP.1 and must use the hash generated in accordance with
               FDP_AUT_EXT.3.1 as input to the signing process. Additionally, use of ephemeral key for
               signing purposes is prohibited.</title></ext-comp-def-title>
          </f-element>
          <f-element id="fdp-aut-ext-3e3">
            <title>The TSF shall use a public and private key pair generated in accordance with
               FCS_CKM.1<h:b>/AK</h:b> (from  <xref to="bibAppPP"/>) and must use this key pair as part of the cryptographic signing process in
               accordance with FDP_AUT_EXT.3.2.</title>
            <ext-comp-def-title><title>The TSF shall use a public and private key pair generated in accordance with
               FCS_CKM.1 and must use this key pair as part of the cryptographic signing process in
               accordance with FDP_AUT_EXT.3.2.</title></ext-comp-def-title>
          </f-element>
          <f-element id="fdp-aut-ext-3e4">
            <title>The TSF shall authenticate the ciphertext data prior to decryption.</title>
          </f-element>
          <f-element id="fdp-aut-ext-3e5">
            <title>The TSF shall notify the user of an unsuccessful authentication and prevent
               decryption of the ciphertext if such an event were to occur.</title>
          </f-element>
          <f-element id="fdp-aut-ext-3e6">
            <title>The TSF shall append the signature to the end of the ciphertext file.</title>
          </f-element>
          <f-element id="fdp-aut-ext-3e7">
            <title>During verification, the TSF shall verify the signature is at the end of the
               ciphertext file.</title>
            <note role="application"> The intent of this requirement is to specify the secure way of
               using a cryptographic signing and hashing function as part of the data authentication
               mechanism.</note>
          </f-element>
        </f-component>
        <!-- FDP_PM_EXT.1 Protection of Data in Power Managed States -->
        <f-component cc-id="fdp_pm_ext.1" id="fdp-pm-ext-1" name="Protection of Data in Power Managed States">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR describes the behavior of the TSF when its host platform is in a locked or unpowered state, which does not relate to any functionality 
                 defined in the Base-PP.
               </consistency-rationale>
          <comp-lev> requires the TOE to ensure that TSF-protected data does not lose its protections if the host platform is placed in a locked or unpowered state.</comp-lev>
          <management>There are no specific management functions identified.
               </management>
          <audit>There are no auditable events foreseen.
               </audit>
          <dependencies>FDP_PRT_EXT.1 Protection of Selected User Data<h:br/>
                 FIA_AUT_EXT.1 User Authorization
               </dependencies>
          <f-element id="fdp-pm-ext-1e1">
            <title>The TSF shall protect all data selected for encryption during the transition to
                   the  <assignable>powered-down state(s) or locked system states for which this capability is provided</assignable>  state as
                   per FDP_PRT_EXT.1.1.</title>
            <aactivity level="component">
              <TSS>The evaluator shall examine the TSS to ensure that it describes the state(s)
                     that are supported by this capability. For each state, the evaluator ensures that the
                     TSS contains a description of how the state is entered, and the actions of the TSF on
                     entering the state, specifically addressing how multiple open resources (of each type)
                     are protected, and how keying material associated with these resources is protected (if
                     different from that described elsewhere). The TSF shall also describe how the state is
                     exited, and how the requirements are met during this transition to an operational state.<h:br/><h:br/>
                     
                     The evaluator shall verify the TSS provides a description of what keys and key material are destroyed when entering 
                     any protected state.<h:br/><h:br/><h:br/>The evaluator shall verify the KMD includes a description of the areas where keys and key material reside.
                     The evaluator shall verify the KMD includes a key lifecycle that includes a description where key material reside,
                     how the key material is used, and how the material is destroyed once a claimed power state is entered
                     and that the documentation in the KMD follows FCS_CKM.6.2 for the destruction.<h:br/><h:br/></TSS>
              <Guidance> The evaluator shall check the Operational Guidance to determine that
                     it describes the states that are supported by the TOE, and provides information related
                     to the correct configuration of these modes and the TOE. <h:br/><h:br/>
                     
                     The evaluator shall validate that guidance documentation contains clear warnings and information on conditions in which the TOE
                     may end up in a non-protected state. In that case it must contain mitigation instructions on what to do in such scenarios.<h:br/><h:br/></Guidance>
              <Tests>
                The following tests must be performed by the evaluator for each supported State, type of resource, platform, and authorization factor:
                <testlist>
                  <test>Following the Operational guidance, configure the Operational Environment and the TOE so that the lower power state of the platform is enabled and protected by the TOE. Open several resources (documented in the test report) that are protected. Invoke the lower power state. On resumption of normal power attempt to access a previously-opened protected resource, observe that an incorrect entry of the authorization factor(s) does not result in access to the system, and that correct entry of the authorization factor(s) does result in access to the resources.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fdp-pm-ext-1e2">
            <title>On the return to a powered-on state from the state(s) indicated in FDP_PM_EXT.1.1,
                   the TSF shall authorize the user in the manner specified in FIA_AUT_EXT.1.1 once before
                   any protected data are decrypted. </title>
          </f-element>
          <f-element id="fdp-pm-ext-1e3">
            <title>The TSF shall destroy all key material and authentication factors stored in plaintext when transitioning to a
                   protected state as defined by FDP_PM_EXT.1.1.</title>
            <note role="application"> For the first assignment, the ST author fills in the state(s) using
                   the same name used in the Operational Guidance for the state that is appropriately
                   protected by the TOE. <h:br/> It should be noted that it is not sufficient to use
                   Operational Environment-based credentials to unlock the TOE from the indicated state;
                   the intent is that returning from the indicated state is equivalent (from an
                   authorization point of view) to returning from a completely powered-off state and
                   re-opening the resources that are protected. </note>
          </f-element>
        </f-component>
        <!-- FDP_PRT_EXT.3 Protection of Third-Party Data -->
        <f-component cc-id="fdp_prt_ext.3" id="fdp-prt-ext-3" name="Protection of Third-Party Data">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR relates to the PP-Module's file encryption capability. This goes beyond the sensitive data protection defined in the Base-PP but 
                 does not prevent the Base-PP functions from being enforced.
               </consistency-rationale>
          <comp-lev> requires the TOE to destroy temporary files that may be created during the encryption or decryption process to prevent the inadvertent disclosure of sensitive data.</comp-lev>
          <management>There are no specific management functions identified.
               </management>
          <audit>There are no auditable events foreseen.
               </audit>
          <dependencies>FDP_PRT_EXT.1 Protection of Selected User Data</dependencies>
          <f-element id="fdp-prt-ext-1e1">
            <title>The TSF shall ensure that all temporary files created by 
                    <selectables><selectable id="fdp_prt_ext.3.1_1">all applications</selectable><selectable id="fdp_prt_ext.3.1_3"><assignable>subset of applications that can integrate with the FE</assignable></selectable></selectables> when decrypting/encrypting the
                   user-selected file (or set of files) are removed or encrypted upon completion of the
                   decryption/encryption operation.</title>
            <note role="application"> This requirement is to cover the detection and encryption of temporary files created by third party applications.
                   If the FE provides a capability to allow specific applications to leverage it, the applications or method they would use to opt in may be included in the assignment.  
                 </note>
            <aactivity level="component">
              <TSS>The evaluator shall
                     examine the TSS to ensure that it describes how the TOE detects and encrypts temporary files (or set of files) that
                     are created in the filesystem of the host by third party products.<h:br/><h:br/>
                      None. <h:br/><h:br/></TSS>
              <Guidance> [conditional]  If any configuration is required for this process the evaluator shall verify it is 
                     described in the guidance documentation. <h:br/><h:br/></Guidance>
              <Tests>The evaluator shall utilize any third party application that would be protected under this protection to generate files, then verify those files are being encrypted.</Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
      <!-- 5.2.8 Identification and Authentication (FIA) -->
      <section title="Identification and Authentication (FIA)" id="fia">
        <ext-comp-def title="Authorization" fam-id="FIA_AUT_EXT">
          <fam-behavior>Components in this family define requirements for how subject authorization is performed. Where FIA_UAU in CC Part 2 defines circumstances where authentication is required, this family describes the specific computational methods used to determine whether a subject’s presented authentication data is valid.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Authorization Factors" fam-id="FIA_FCT_EXT">
          <fam-behavior>Components in this family define requirements for the use of alternative authorization factors for users to access protected data.</fam-behavior>
        </ext-comp-def>
        <!-- FIA_FCT_EXT.1 Multi-User Authorization -->
        <f-component cc-id="fia_fct_ext.1" id="fia-fct-ext-1" name="Multi-User Authorization">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR relates to the use of authorization factors, which does not relate to any behavior described in the Base-PP.
          </consistency-rationale>
          <comp-lev> requires the TSF to maintain differing authorization factors for multiple users.</comp-lev>
          <management>There are no specific management functions identified.
          </management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FIA_AUT_EXT.1 User Authorization</dependencies>
          <f-element id="fia-fct-ext-1e1">
            <title>The TSF shall support the use of authorization factors from multiple users that result in unique KEKs.</title>
            <aactivity level="component">
              <TSS>The evaluator shall examine the TSS to determine that it
                identifies each of the resource protected in encrypted form and the key chain that protects that resource.
                <h:br/><h:br/>
                The evaluator shall examine the TSS to verify key chains are separate ensuring resources are protected from other users, 
                with the exception of files permitted to be shared under the mechanism described in FIA_FCT_EXT.2.
                <h:br/><h:br/>
                 None. <h:br/><h:br/></TSS>
              <Guidance> - The evaluator shall examine the operation guidance to
                determine that it contains instructions on how to establish multiple accounts and protect resources from other users.
                If different for different underlying platforms, the evaluator determines that all platforms listed in the ST are addressed.<h:br/><h:br/></Guidance>
              <Tests>The evaluator shall ensure that different users using different authorization factors are unable to decrypt each others protected resources for each type of protected resource identified in the TSS. The test succeeds if the users are unable to decrypt resources not chained to them, with the exception of any resources linked in FIA_FCT_EXT.2.</Tests>
            </aactivity>
          </f-element>
          <f-element id="fia-fct-ext-1e2">
            <title>The TSF shall support the ability of each user to have files protected by a key chain tied only to that user's credentials.
            </title>
            <note role="application"> FIA_FCT_EXT.1.1 requires the TSF to support multiple
              authorization factors to produce multiple KEKs, the intent is that the TSF supports a
              system where multiple users have access to files on the underlying platform, and that
              each user has an authorization factor so that they can protect their own files from
              other users. This should be accomplished via the methods detailed in FIA_FCT_EXT.1.2. 
            </note>
          </f-element>
        </f-component>
        <!-- FIA_FCT_EXT.2 Authorized Key Sharing -->
        <f-component cc-id="fia_fct_ext.2" id="fia-fct-ext-2" name="Authorized Key Sharing">
          <depends>
            <optional/>
          </depends>
          <consistency-rationale>This SFR relates to key sharing, which does not relate to any behavior described in the Base-PP.
          </consistency-rationale>
          <comp-lev> requires the TSF to support some mechanism to share a valid authorization factor between different users.</comp-lev>
          <management>There are no specific management functions identified.
          </management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FCS_CKM.2 Cryptographic Key Distribution<h:br/>
          FCS_COP.1 Cryptographic Operation</dependencies>
          <f-element id="fia-fct-est-2e1">
            <title>The TSF shall support
               <selectables><selectable id="fia_fct_ext.2.1_1">Authorized User Key sharing via key transport as specified in FCS_COP.1<h:b>/KT</h:b></selectable><selectable id="fia_fct_ext.2.1_2">Authorized User Key sharing via key wrapping as specified in FCS_COP.1<h:b>/KW</h:b></selectable><selectable id="fia_fct_ext.2.1_3">Distribution of a shared key from [<h:i>an enterprise management server</h:i>] as specified in FCS_CKM.2 <h:b>(from Base-PP)</h:b></selectable></selectables>.
            </title>
            <ext-comp-def-title><title>The TSF shall support
              <selectables><selectable>Authorized User Key sharing via key transport as specified in FCS_COP.1</selectable><selectable>Authorized User Key sharing via key wrapping as specified in FCS_COP.1</selectable><selectable>Distribution of a shared key from <assignable>external IT entity</assignable> as specified in FCS_CKM.2</selectable></selectables>.
            </title></ext-comp-def-title>
            <note role="application"> While FIA_FCT_EXT.1 requires that
              each user has an authorization factor so that they can protect their own files from

              other users. FIA_FCT_EXT.2 created a mechanism to safely share files between users.

            </note>
            <aactivity level="component">
              <TSS>The evaluator shall examine the TSS to determine that it
                identifies each of the resources that is shareable in encrypted form (for instance,
                encrypted files may be shareable among users, but encrypted directories may not), and the
                method by which the resource can be shared among users with different authorization
                factors. <h:br/><h:br/>
                
                The evaluator shall examine the operation
                guidance to determine that it contains instructions on how to set up and share resources
                with other users, if additional actions are necessary due to use of the encryption
                product. If different for different underlying platforms, the evaluator determines that
                all platforms listed in the ST are addressed.<h:br/><h:br/>
                 None. <h:br/><h:br/></TSS>
              <Guidance> - The evaluator shall examine the operation guidance to
                determine that it contains instructions on how to set up and share resources
                with other users, if additional actions are necessary due to use of the
                encryption product. If different for different underlying platforms, the
                evaluator determines that all platforms listed in the ST are addressed.<h:br/><h:br/></Guidance>
              <Tests>
                <testlist>
                  <test>For each type of resource that is identified in the TSS as sharable in its encrypted form, the evaluator shall ensure that different users using different authorization factors are able to successfully access the resource using different authorization factors. This should include making changes to the resource to ensure that the same resource is being shared, and that a per-user copy of the resource is not being made.</test>
                  <test>For each type of resource that is identified in the TSS as sharable in its encrypted form, the evaluator shall ensure that a different unauthorized user is unable to access the encrypted file shared. This test succeeds if the unauthorized user is unable to access a file shared between other authorized users.</test>
                </testlist>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
    </opt-sfrs>
    <sel-sfrs>
      <!-- 5.2.9 Cryptographic Support (FCS) -->
      <section title="Cryptographic Support (FCS)" id="fcs">
        <ext-comp-def title="Cryptographic Operation" fam-id="FCS_COP_EXT">
          <fam-behavior>Components in this family define requirements for cryptographic operations specific to file encryption.</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Cryptographic Key Derivation Function" fam-id="FCS_KDF_EXT">
          <fam-behavior>Components in this family define requirements for the implementation of cryptographic key derivation functions</fam-behavior>
        </ext-comp-def>
        <ext-comp-def title="Submask Combining" fam-id="FCS_SMC_EXT">
          <fam-behavior>Components in this family define requirements for generation of intermediate keys via submask combining.</fam-behavior>
        </ext-comp-def>
        <!-- FCS_CKM_EXT.3 Key Encrypting Key (KEK) Support -->
        <f-component cc-id="fcs_ckm_ext.3" id="fcs-ckm-ext-3" name="Key Encrypting Key (KEK) Support">
          <depends on-sel="HASKEK"/>
          <consistency-rationale>This SFR relates to how KEKs are made available to the TSF, which are used for functionality that does not relate to the Base-PP.
        </consistency-rationale>
          <comp-lev> describes the method by which the TSF acquires or generates key encryption keys.</comp-lev>
          <management>There are no specific management functions identified.</management>
          <audit>There are no auditable events foreseen.</audit>
          <dependencies>FCS_RBG_EXT.1 Random Bit Generation Services</dependencies>
          <f-element id="fcs-ckm-ext-3e1">
            <title> The TSF shall 
             <selectables><selectable id="fcs_ckm_ext.3.1_1">accept KEK from an enterprise management server</selectable><selectable id="fcs_ckm_ext.3.1_2">generate KEK cryptographic keys <selectables linebreak="yes"><selectable id="fcs_ckm_ext.3.1_3">using a Random Bit Generator as specified in FCS_RBG_EXT.1 and with entropy corresponding to the security strength of AES key sizes of <h:i>256 bit</h:i></selectable><selectable id="DRVKEKPAS">derived from a password/passphrase that is conditioned as defined in FCS_CKM_EXT.6</selectable></selectables> </selectable></selectables>.
          </title>
            <ext-comp-def-title><title> The TSF shall 
            <selectables><selectable>accept KEK from an enterprise management server</selectable><selectable> generate KEK cryptographic keys <h:br/><selectables linebreak="yes"><selectable> using a Random Bit Generator as specified in FCS_RBG_EXT.1
                    and with entropy corresponding to the security strength of AES key sizes of 256 bits</selectable><selectable> derived from a password/passphrase that is conditioned as defined in FCS_CKM_EXT.6</selectable></selectables></selectable></selectables>.
          </title></ext-comp-def-title>
            <note role="application">This requirement must be included in STs in which KEKs originating from is chosen in FCS_KYC_EXT.1.1. </note>
            <aactivity level="component">
              <TSS>The evaluator shall review the TSS to determine that a
            description covering how and when KEK(s) are generated exists. The description must
            cover all environments on which the TOE is claiming conformance, and include any
            preconditions that must exist in order to successfully generate the KEKs. The evaluator shall verify 
            that the description of how the KEK(s) are generated is consistent with
            the instructions in the AGD guidance, and any differences that arise from different
            platforms are taken into account. <h:br/><h:br/> 

            Conditional: <h:br/> 
            If using a RBG was selected the evaluator shall examine the TSS and verify that it describes how the functionality
            described by FCS_RBG_EXT.1 (from the <xref to="bibAppPP"/>) is invoked to
            generate KEK(s). To the extent possible from the description of the RBG functionality in
            FCS_RBG_EXT.1 (from <xref to="bibAppPP"/>), the evaluator shall determine that the key size being
            requested is identical to the key size selected.  <h:br/><h:br/> 

            Conditional: <h:br/>               
            If derived from a password/passphrase is selected the examination of the TSS section is performed as
            part of FCS_CKM_EXT.6 evaluation activities. <h:br/><h:br/>
            None. <h:br/><h:br/></TSS>
              <Guidance> The evaluator shall review the
            instructions in the AGD guidance to determine that any explicit actions that need to
            be taken by the user to establish a KEK exist-taking into account any differences that
            arise from different platforms-and are consistent with the description in the TSS.<h:br/><h:br/></Guidance>
              <Tests>None.</Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_CKM_EXT.6 Cryptographic Password/Passphrase Conditioning -->
        <f-component cc-id="fcs_ckm_ext.6" id="fcs-ckm-ext-6" name="Cryptographic Password/Passphrase Conditioning">
          <depends on-sel="USEPAS"/>
          <depends on-sel="DRVFEKPAS"/>
          <depends on-sel="DRVKEKPAS"/>
          <consistency-rationale>This SFR defines a key derivation method based on passphrase conditioning. It uses the FCS_RBG_EXT.1 SFR from the Base-PP in its intended manner 
            but otherwise does not relate to the Base-PP's functionality.
          </consistency-rationale>
          <comp-lev> requires the TSF to implement password/passphrase conditioning using a specified algorithm and with specific constraints on the password/passphrase composition.</comp-lev>
          <management>There are no specific management functions identified.</management>
          <audit>There are no auditable events foreseen.</audit>
          <dependencies>FCS_COP.1 Cryptographic Operation<h:br/>
            FCS_RBG_EXT.1 Random Bit Generation Services</dependencies>
          <f-element id="fcs-ckm-ext-6e1">
            <title>
              The TSF shall support a password/passphrase of up to 
               <selectables><selectable id="fcs_ckm_ext.6.1_2"><assignable>maximum value supported by the platform</assignable></selectable><selectable id="fcs_ckm_ext.6.1_4"><assignable>maximum password size, positive integer of 64 or more</assignable></selectable></selectables> 
              characters used to generate a password authorization factor.
            </title>
            <aactivity level="component">
              <TSS>FCS_CKM_EXT.6.1: There are two aspects of this component that require
                evaluation: passwords/passphrases of the length specified in the requirement (at least
                64 characters or a length defined by the platform) are supported, and that the characters that are input are subject to the
                selected conditioning function. These activities are separately addressed in the text
                below. 
                
                <h:br/><h:br/>Support for minimum length: The evaluators shall check to ensure that the 
                TSS describes the allowable ranges for password/passphrase lengths, and that at least 64 characters or a length defined by the platform 
		      may be specified by the user.
                
                <h:br/><h:br/>Support for character set: The evaluator shall check to ensure that the 
                TSS describes the allowable character set and that it contains the characters listed in the SFR.
                
                <h:br/><h:br/>Support for PBKDF: The evaluator shall examine the TSS to ensure
                that the formation of all KEKs or FEKs (as decided in the FCS_CKM_EXT.3 selection) is
                described and that the key sizes match that described by the ST author. 
                
                <h:br/><h:br/>The
                evaluator shall check that the TSS describes the method by which the password/passphrase
                is first encoded and then fed to the SHA algorithm. The settings for the algorithm
                (padding, blocking, etc.) shall be described, and the evaluator shall verify that these
                are supported by the selections in this component as well as the selections concerning
                the hash function itself. The evaluator shall verify that the TSS contains a description
                of how the output of the hash function is used to form the submask that will be input
                into the function and is the same length as the KEK as specified in FCS_KYC_EXT.1.
                
                <h:br/><h:br/>For the NIST SP 800-132-based conditioning of the password/passphrase, the required
                evaluation activities will be performed when doing the evaluation activities for the
                appropriate requirements (FCS_COP.1.1(4)). If any manipulation of the key is performed
                in forming the submask that will be used to form the FEK or KEK, that process shall be
                described in the TSS. 
                
                <h:br/><h:br/>No explicit testing of the formation of the submask from the
                input password is required. 
                
                <h:br/><h:br/>FCS_CKM_EXT.6.2: The ST author shall provide a
                description in the TSS regarding the salt generation. The evaluator shall confirm that
                the salt is generated using an RBG described in FCS_RBG_EXT.1 (from the <xref to="bibAppPP"/>). <h:br/><h:br/>
                 None. <h:br/><h:br/></TSS>
              <Guidance>Support for minimum length: The evaluators shall check the Operational Guidance 
                to determine that there are instructions on how to generate large passwords/passphrases, and
                instructions on how to configure the password/passphrase length 
                to provide entropy commensurate with the keys that the authorization factor is protecting.  <h:br/><h:br/></Guidance>
              <Tests>
                Support for Password/Passphrase characteristics: In addition to the analysis above, the evaluator shall also perform the following tests on a TOE configured according to the Operational Guidance:
                <testlist>
                  <test>Ensure that the TOE supports password/passphrase lengths as defined in the SFR assignments.</test>
                  <test>Ensure that the TOE does not accept more than the maximum number of characters specified in FCS_CKM_EXT.6.1.</test>
                  <test>Ensure that the TOE does not accept less than the minimum number of characters specified in FCS_CKM_EXT.6.4. If the minimum length is settable by the administrator, the evaluator determines the minimum length or lengths to test.</test>
                  <test>Ensure that the TOE supports passwords consisting of all characters listed in FCS_CKM_EXT.6.2.</test>
                </testlist>
                 <h:b>Conditioning:</h:b>No explicit testing of the formation of the authorization factor from the input password/passphrase is required.
              </Tests>
            </aactivity>
          </f-element>
          <f-element id="fcs-ckm-ext-6e2">
            <title>
              The TSF shall allow passwords to be composed of any combination of upper case characters,
              lower case characters, numbers, and the following special characters: "!", "@", "#", "$", "%", "^", "&amp;", "*", "(", and ")",
              and  <selectables><selectable id="fcs_ckm_ext.6.2_2"><assignable>other supported special characters</assignable></selectable><selectable id="fcs_ckm_ext.6.2_3">no other characters</selectable></selectables>.</title>
          </f-element>
          <f-element id="fcs-ckm-ext-6e3">
            <title>
              The TSF shall perform Password-based Key Derivation
              Functions in accordance with a specified cryptographic algorithm 
               <selectables><selectable id="fcs_ckm_ext.6.3_1">HMAC-<h:i>SHA-384</h:i></selectable><selectable id="fcs_ckm_ext.6.3_2">HMAC-<h:i>SHA-512</h:i></selectable></selectables>, with 
               <selectables><selectable id="fcs_ckm_ext.6.3_3"> <assignable>positive integer of 10,000 or more</assignable> iterations</selectable><selectable id="fcs_ckm_ext.6.3_5">value supported by the platform, greater than 1000</selectable></selectables>, and
              output cryptographic key sizes <h:i>256</h:i> that meet the following: [<h:i>NIST SP 800-132</h:i>]. 
            </title>
            <ext-comp-def-title><title>
                The TSF shall perform Password-based Key Derivation
                Functions in accordance with a specified cryptographic algorithm HMAC-<selectables><selectable>SHA-384</selectable><selectable>SHA-512</selectable></selectables>, with 
                <selectables><selectable><assignable>positive integer of 4096 or more</assignable> iterations</selectable><selectable>value supported by the platform, greater than 1000</selectable></selectables>, and
                output cryptographic key sizes <assignable>output key size</assignable> 
                that meet the following: <assignable>applicable standard</assignable>. 
              </title></ext-comp-def-title>
          </f-element>
          <f-element id="fcs-ckm-ext-6e4">
            <title>
              The TSF shall not accept passwords less than 
               <selectables><selectable id="fcs_ckm_ext.6.4_1">a value settable by the administrator</selectable><selectable id="fcs_ckm_ext.6.4_3"><assignable>minimum password length accepted by the TOE, must be &gt;= 1</assignable></selectable></selectables>  and greater than the maximum password length 
              defined in FCS_CKM_EXT.6.1.</title>
          </f-element>
          <f-element id="fcs-ckm-ext-6e5">
            <title>The TSF shall generate all salts using an RBG that meets FCS_RBG_EXT.1 and with entropy 
              corresponding to the security strength selected for PBKDF in FCS_CKM_EXT.6.3.</title>
            <note role="application">
              
              
              The password/passphrase is represented on the host machine as a sequence of characters whose 
              encoding depends on the TOE and the underlying OS. This sequence must be conditioned into a string of bits that is to be used as a KEK that is the same size as the FEK.
              
              <h:br/><h:br/>For FCS_CKM_EXT.6.1, the ST author assigns the maximum size of the password/passphrase it supports; it must support at least 64 characters or a length defined by the platform. 
              The selection "maximum value supported by the platform" may only be selected if "implement platform-provided functionality to provide user authorization"
              was selected in FIA_AUT_EXT.1.
              
              <h:br/><h:br/>For FCS_CKM_EXT.6.2, the ST author assigns any other supported characters; if there are no other supported characters, 
              they should select "no other characters".
              
              <h:br/><h:br/>For FCS_CKM_EXT.6.3, the ST author selects the parameters based on the PBKDF used by the TSF. The key cryptographic
              key sizes in FCS_CKM_EXT.6.3 are made to correspond to the KEK key sizes selected in FCS_KYC_EXT.1.
              
              <h:br/><h:br/>The password/passphrase must be conditioned into a string of bits that forms the submask to be used as input into the
              KEK. Conditioning is performed using one of the identified hash functions in accordance with the process described in
              NIST SP 800-132. SP 800-132 requires the use of a pseudo-random function (PRF) consisting of HMAC with an approved hash function.
              
              <h:br/><h:br/>Appendix A of SP 800-132 recommends setting the iteration count in order to increase the computation needed to derive
              a key from a password and, therefore, increase the workload of performing a password recovery attack. However, for this PP-Module,
              a minimum iteration count of 10,000 is required in order to ensure that twelve bits of security is added to the password/passphrase value.
              A significantly higher value is recommended to ensure optimal security. If the platform is leveraged for authentication the value may be a 
              minimum of 1000, this selection may only be selected if "implement platform-provided functionality to provide user authorization"
              was selected in FIA_AUT_EXT.1.
              
              <h:br/><h:br/>For FCS_CKM_EXT.6.4 If the minimum password length is settable, then ST author chooses "a value settable by the administrator
              for this component for FMT_SMF.1.2. If the minimum length
              is not settable, the ST author fills in the assignment with the minimum length the password must be (zero-length passwords are not allowed for compliant TOEs).  
              
              <h:br/><h:br/>This requirement is selection dependent on FIA_AUT_EXT.1.1.</note>
          </f-element>
        </f-component>
        <!-- FCS_COP.1/KE Cryptographic operation (Key Encryption) -->
        <f-component cc-id="fcs_cop.1" id="fcs-cop-1-ke" name="Cryptographic operation (Key Encryption)" iteration="KE">
          <depends on-sel="USEKEYENC"/>
          <consistency-rationale>This SFR defines key encryption functionality that is outside the scope of the original cryptographic operations defined in the Base-PP.
          </consistency-rationale>
          <f-element id="fcs_cop-1-1_KE">
            <title>
              The TSF shall  <h:b> <selectables><selectable id="fcs_cop.1.1_KE_1">use platform-provided functionality to perform Key Encryption</selectable><selectable id="fcs_cop.1.1_KE_2">perform key encryption and decryption</selectable></selectables> </h:b>
              in accordance with a specified cryptographic algorithm [<h:i>AES used in CBC mode</h:i>] and cryptographic key sizes 
              [<h:i>256 bits</h:i>] that meet the following: [<h:i>AES as specified in SP 800-38A</h:i>].
            </title>
            <note role="application">
              
              This requirement is used in the body of the ST if the ST author chooses to
              use AES encryption/decryption for protecting the keys as part of the key chaining approach
              that is specified in FCS_KYC_EXT.1.</note>
            <aactivity level="component">
              <TSS>If the platform provides the FEK
                encryption/decryption, then the evaluator shall examine the TSS to verify that it
                describes how the FEK encryption/decryption is invoked. <h:br/><h:br/> The evaluator shall verify the TSS includes a description of the key size used for
                encryption and the mode used for the key encryption <h:br/><h:br/>None.<h:br/><h:br/></TSS>
              <Guidance> None. <h:br/><h:br/></Guidance>
              <Tests>The evaluation activity tests specified for AES in CBC mode in FCS_COP.1.1(1) in the underlying <xref to="bibAppPP"/> shall be performed.</Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_COP.1/KT Cryptographic operation (Key Transport) -->
        <f-component cc-id="fcs_cop.1" id="fcs-cop-1-kt" name="Cryptographic operation (Key Transport)" iteration="KT">
          <depends on-sel="USEKEYTRA"/>
          <consistency-rationale>This SFR defines key transport functionality that is outside the scope of the original cryptographic operations defined in the Base-PP.
          </consistency-rationale>
          <f-element id="fcs_cop-1-1_KT">
            <title>
              The TSF shall perform [<h:i>key transport</h:i>] in accordance with a
              specified cryptographic algorithm [<h:i>RSA</h:i>] in the following modes: 
              <h:b><h:li>KTS-OAEP</h:li></h:b> 
              and cryptographic key sizes 
               <selectables><selectable id="fcs_cop.1.1_KT_1">3072</selectable><selectable id="fcs_cop.1.1_KT_2">4096</selectable></selectables>  that meet the following: [<h:i>NIST SP 800-56B, Revision 2</h:i>].
            </title>
            <note role="application">
              
              This requirement is used in the body of the ST if the ST author chooses to
              use key transport in the key chaining approach that is specified in FCS_KYC_EXT.1.
            </note>
            <aactivity level="component">
              <TSS>The evaluator shall verify the TSS provides a high level description of the RSA
                scheme and the cryptographic key size that is being used, and that the asymmetric
                algorithm being used for key transport is RSA. If more than one scheme/key size are
                allowed, then the evaluator shall make sure and test all combinations of scheme and
                key size. There may be more than one key size to specify - an RSA modulus size
                (and/or encryption exponent size), an AES key size, hash sizes, MAC key/MAC tag
                size.<h:br/><h:br/>
                The evaluator shall verify that the TSS
                identifies the hash function, the mask generating function, the random bit generator,
                the encryption primitive and decryption primitive.
                 <h:br/><h:br/>None.<h:br/><h:br/></TSS>
              <Guidance> None. <h:br/><h:br/></Guidance>
              <Tests>
                For each supported key transport schema, the evaluator shall initiate at least 25 sessions that require key transport with an independently developed remote instance of a key transport entity, using known RSA key-pairs. The evaluator shall observe traffic passed from the sender-side and to the receiver-side of the TOE, and shall perform the following tests, specific to which key transport scheme was employed.
                <testlist>
                  <test>The evaluator shall inspect each cipher text, C, produced by the RSA-OAEP encryption operation of the TOE and make sure it is the correct length, either 256 or 384 bytes depending on RSA key size. The evaluator shall also feed into the TOE's RSA-OEAP decryption operation some cipher texts that are the wrong length and verify that the erroneous input is detected and that the decryption operation exits with an error code.</test>
                  <test>The evaluator shall convert each cipher text, C, produced by the RSA-OAEP encryption operation of the TOE to the correct cipher text integer, c, and use the decryption primitive to compute em = RSADP((n,d),c) and convert em to the encoded message EM. The evaluator shall then check that the first byte of EM is 0x00. The evaluator shall also feed into the TOE's RSA-OEAP decryption operation some cipher texts where the first byte of EM was set to a value other than 0x00, and verify that the erroneous input is detected and that the decryption operation exits with an error code.</test>
                  <test>The evaluator shall decrypt each cipher text, C, produced by the RSA-OAEP encryption operation of the TOE using RSADP, and perform the OAEP decoding operation (described in NIST SP 800-56B section 7.2.2.4) to recover HA' || X. For each HA', the evaluator shall take the corresponding A and the specified hash algorithm and verify that HA' = Hash(A). The evaluator shall also force the TOE to perform some RSA-OAEP decryption where the A value is passed incorrectly, and the evaluator shall verify that an error is detected.</test>
                  <test>The evaluator shall check the format of the 'X' string recovered in OAEP.Test.3 to ensure that the format is of the form PS || 01 || K, where PS consists of zero or more consecutive 0x00 bytes and K is the transported keying material. The evaluator shall also feed into the TOE's RSA-OEAP decryption operation some cipher texts for which the resulting 'X' strings do not have the correct format (i.e., the leftmost non-zero byte is not 0x01). These incorrectly formatted 'X' variables shall be detected by the RSA-OEAP decrypt function.</test>
                  <test>The evaluator shall trigger all detectable decryption errors and validate that the returned error codes are the same and that no information is given back to the sender on which type of error occurred. The evaluator shall also validate that no intermediate results from the TOE's receiver-side operations are revealed to the sender.</test>
                </testlist>
                 <h:br/>
              </Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_COP.1/KW Cryptographic operation (Key Wrapping) -->
        <f-component cc-id="fcs_cop.1" id="fcs-cop-1-kw" name="Cryptographic operation (Key Wrapping)" iteration="KW">
          <depends on-sel="USEKEYWRA"/>
          <consistency-rationale>This SFR defines usage of AES functionality not defined by the Base-PP. However, this functionality is only used in certain situations that are 
            specific to this PP-Module and do not affect the ability of any Base-PP SFRs to be enforced.
          </consistency-rationale>
          <f-element id="fcs_cop-1-1_KW">
            <title>
              The TSF shall  <h:b> <selectables><selectable id="fcs_cop.1.1_KW_1">use platform-provided functionality to perform Key Wrapping</selectable><selectable id="fcs_cop.1.1_KW_2">implement functionality to perform Key Wrapping</selectable></selectables> </h:b> in accordance with a specified cryptographic algorithm [<h:i>AES</h:i>]  <h:b>in the following modes <selectables linebreak="yes"><selectable id="fcs_cop.1.1_KW_3">Key Wrap</selectable><selectable id="fcs_cop.1.1_KW_4">Key Wrap with Padding</selectable><selectable id="fcs_cop.1.1_KW_5">GCM mode</selectable><selectable id="fcs_cop.1.1_KW_6">CCM mode</selectable></selectables> </h:b> and cryptographic key sizes [<h:i>256 bits (AES)</h:i>] 
              that meet the following:  <h:b> <selectables linebreak="yes"><selectable id="fcs_cop.1.1_KW_7">"NIST SP 800-38C"</selectable><selectable id="fcs_cop.1.1_KW_8">"NIST SP 800-38D"</selectable><selectable id="fcs_cop.1.1_KW_9">"NIST SP 800-38F"</selectable></selectables>  and no other standards</h:b>.
            </title>
            <note role="application">
              This requirement is used in the body of the ST if the ST author chooses to
              use key wrapping in the key chaining approach that is specified in FCS_KYC_EXT.1.</note>
            <aactivity level="component">
              <TSS>Conditional: If use platform provided functionality was selected, then the evaluator shall examine the TSS to verify that it
                describes how the FEK encryption/decryption is invoked. <h:br/><h:br/>
                
                Conditional: If implement functionality was selected, The evaluator shall check that the TSS includes
                a description of encryption function(s) used for key wrapping. The evaluator should check that this description of the
                selected encryption function includes the key sizes and modes of operations as specified in the selection above.
                The evaluator shall check that the TSS describes the means by which the TOE satisfies constraints on algorithm parameters
                included in the selections made for 'cryptographic algorithm' and 'list of standards'. <h:br/><h:br/>
                
                The evaluator shall verify the TSS includes a description of the key wrap function(s)
                and shall verify the key wrap uses an approved key wrap algorithm according to the
                appropriate specification.<h:br/><h:br/>
                The evaluator shall review the KMD to ensure that all keys are wrapped using the
                approved method and a description of when the key wrapping occurs.<h:br/><h:br/></TSS>
              <Guidance> If multiple encryption modes are supported, the evaluator examines the guidance documentation
                to determine that the method of choosing a specific mode/key size by the end user is described.<h:br/><h:br/></Guidance>
              <Tests>The evaluation activity tests specified for AES in GCM mode in the underlying <xref to="bibAppPP"/> shall be performed in the case that "GCM" is selected in the requirement. <h:br/> <h:br/> <h:p><h:b>AES Key Wrap (AES-KW) and Key Wrap with Padding (AES-KWP) Test</h:b></h:p> <h:p>
                  The evaluator will test the authenticated encryption functionality of AES-KW for EACH
                  combination of the following input parameter lengths:
                  <h:ul><h:li>128 and 256 bit key encryption keys (KEKs)</h:li> <h:li>Three plaintext lengths. One of the plaintext lengths shall be two semi-blocks (128
                      bits). One of the plaintext lengths shall be three semi-blocks (192 bits). The third data
                      unit length shall be the longest supported plaintext length less than or equal to 64
                      semi-blocks (4096 bits).
                    </h:li></h:ul>
                  using a set of 100 key and plaintext pairs and obtain the ciphertext that results from AES-KW
                  authenticated encryption. To determine correctness, the evaluator will use the AES-KW
                  authenticated-encryption function of a known good implementation.
                </h:p> <h:p>
                  
                  The evaluator will test the authenticated-decryption functionality of AES-KW using the
                  same test as for authenticated-encryption, replacing plaintext values with ciphertext values
                  and AES-KW authenticated-encryption with AES-KW authenticated-decryption.
                </h:p> <h:p>
                  The evaluator will test the authenticated-encryption functionality of AES-KWP using the
                  same test as for AES-KW authenticated-encryption with the following change in the three
                  plaintext lengths:
                  <h:ul><h:li>One plaintext length shall be one octet. One plaintext length shall be 20 octets (160
                      bits).</h:li> <h:li>
                      One plaintext length shall be the longest supported plaintext length less than or equal
                      to 512 octets (4096 bits).
                    </h:li></h:ul>
                  The evaluator will test the authenticated-decryption functionality of AES-KWP using the
                  same test as for AES-KWP authenticated-encryption, replacing plaintext values with
                  ciphertext values and AES-KWP authenticated-encryption with AES-KWP authenticated-decryption.
                </h:p> <h:br/> <h:br/>AES-CCM Tests <h:br/> <h:br/>It is not recommended that evaluators use values obtained from static sources such as http://csrc.nist.gov/groups/STM/cavp/documents/mac/ccmtestvectors.zip or use values not generated expressly to exercise the AES-CCM implementation. <h:br/> <h:br/>The evaluator shall test the generation-encryption and decryption-verification functionality of AES-CCM for the following input parameter and tag lengths: Keys: All supported and selected key sizes (e.g., 128, 256 bits). Associated Data: Two or three values for associated data length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported associated data lengths, and 2^16 (65536) bytes, if supported. Payload: Two values for payload length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported payload lengths. Nonces: All supported nonce lengths (7, 8, 9, 10, 11, 12, 13) in bytes. Tag: All supported tag lengths (4, 6, 8, 10, 12, 14, 16) in bytes. <h:br/> <h:br/>The testing for CCM consists of five tests. To determine correctness in each of the below tests, the evaluator shall compare the ciphertext with the result of encryption of the same inputs with a known good implementation. <h:br/> <h:br/>Variable Associated Data Test <h:br/>For each supported key size and associated data length, and any supported payload length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext. <h:br/> <h:br/>Variable Payload Text <h:br/>For each supported key size and payload length, and any supported associated data length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext. <h:br/> <h:br/>Variable Nonce Test <h:br/>For each supported key size and nonce length, and any supported associated data length, payload length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext. <h:br/> <h:br/>Variable Tag Test <h:br/>For each supported key size and tag length, and any supported associated data length, payload length, and nonce length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext. <h:br/> <h:br/>Decryption-Verification Process Test <h:br/>To test the decryption-verification functionality of AES-CCM, for each combination of supported associated data length, payload length, nonce length, and tag length, the evaluator shall supply a key value and 15 sets of input plus ciphertext, and obtain the decrypted payload. Ten of the 15 input sets supplied should fail verification and five should pass.</Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_KDF_EXT.1 Cryptographic Key Derivation Function -->
        <f-component cc-id="fcs_kdf_ext.1" id="fcs-kdf-ext-1" name="Cryptographic Key Derivation Function">
          <depends on-sel="USEKEYDER"/>
          <consistency-rationale>This SFR defines key transport functionality. It uses random bit generation and keyed-hash message authentication functionality from the Base-PP 
            as they are intended but is otherwise outside the scope of the original cryptographic operations defined in the Base-PP.
          </consistency-rationale>
          <comp-lev> requires the TSF to specify how it performs key derivation.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT: <h:ul><h:li>Configuration of the cryptographic functionality.</h:li></h:ul></management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>FCS_COP.1 Cryptographic Operation <h:br/>
            FCS_RBG_EXT.1 Random Bit Generation Services <h:br/>
            FCS_SMC_EXT.1 Submask Combining</dependencies>
          <f-element id="fcs_kdf_ext-1-1">
            <title>
                The TSF shall [ <h:i>accept <selectables><selectable id="fcs_kdf_ext.1.1_1">a submask generated by an RBG as specified in FCS_RBG_EXT.1 (from <xref to="bibAppPP"/>)</selectable><selectable id="fcs_kdf_ext.1.1_2">a conditioned password</selectable><selectable id="fcs_kdf_ext.1.1_3">an imported submask</selectable></selectables></h:i>] to derive an intermediate key, as defined in
                    [ <h:i> <selectables><selectable id="fcs_kdf_ext.1.1_4">NIST SP 800-108 <selectables><selectable id="fcs_kdf_ext.1.1_5">KDF in Counter Mode</selectable><selectable id="fcs_kdf_ext.1.1_6">KDF in Feedback Mode</selectable><selectable id="fcs_kdf_ext.1.1_7">KDF in Double-Pipeline Iteration Mode</selectable></selectables> </selectable><selectable id="fcs_kdf_ext.1.1_8">NIST SP 800-132</selectable></selectables></h:i>] using the keyed-hash functions specified in FCS_COP.1<h:b>/KeyedHash</h:b>
                    (from  <xref to="bibAppPP"/>), such that the output is at least of
                    equivalent security strength (in number of bits) to the [<h:i>FEK</h:i>].
            </title>
            <ext-comp-def-title><title>
                The TSF shall <assignable>intermediate key derivation function</assignable>
                to derive an intermediate key, as defined in <assignable>applicable key standard</assignable> 
                using the keyed-hash functions specified in FCS_COP.1, such that the output is at least of
                equivalent security strength (in number of bits) to the <assignable>derived key</assignable>.
            </title></ext-comp-def-title>
            <note role="application">
              
              This requirement is used in the body of the ST if the ST author chooses to
              use key derivation in the key chaining approach that is specified in FCS_KYC_EXT.1.
              This requirement establishes acceptable methods for generating a new random key or an
              existing submask to create a new key along the key chain.</note>
            <aactivity level="component">
              <TSS>The evaluator shall verify the TSS includes a description of the key derivation
                function and shall verify the key derivation uses an approved derivation mode and
                key expansion algorithm according to SP 800-108 and SP 800-132. <h:br/><h:br/>
                 None. <h:br/><h:br/></TSS>
              <Guidance> None. <h:br/><h:br/></Guidance>
              <Tests>None.</Tests>
            </aactivity>
          </f-element>
        </f-component>
        <!-- FCS_SMC_EXT.1 Submask Combining -->
        <f-component cc-id="fcs_smc_ext.1" id="fcs-smc-ext-1" name="Submask Combining">
          <depends on-sel="USEKEYCOM"/>
          <consistency-rationale>This SFR relates to submask combining as a method of generating intermediate keys. Key hierarchy functionality is outside the scope of the Base-PP.
          </consistency-rationale>
          <comp-lev> requires the TSF to implement submask combining in a specific manner to support the generation of intermediate keys.</comp-lev>
          <management>The following actions could be considered for the management functions in FMT: <h:ul><h:li>Configuration of the cryptographic functionality.</h:li></h:ul></management>
          <audit>There are no auditable events foreseen.
          </audit>
          <dependencies>No dependencies.</dependencies>
          <f-element id="fcs_smc_ext-1-1">
            <title>The TSF shall combine submasks using the following method [ <h:i> <selectables><selectable id="fcs_smc_ext.1.1_1">exclusive OR (XOR)</selectable><selectable id="fcs_smc_ext.1.1_2">SHA-384</selectable><selectable id="fcs_smc_ext.1.1_3">SHA-512</selectable><selectable id="fcs_smc_ext.1.1_4">HMAC-SHA-384</selectable><selectable id="fcs_smc_ext.1.1_5">HMAC-SHA-512</selectable></selectables></h:i>] to generate an intermediate key.</title>
            <ext-comp-def-title><title>The TSF shall combine submasks using the following method <assignable>combination method</assignable>
            to generate an intermediate key.</title></ext-comp-def-title>
            <note role="application">
              
              This requirement specifies the way that a product may combine the
              various submasks by using either an XOR or an approved SHA-hash. This requirement is selection dependent on FCS_KYC_EXT.1.1.</note>
            <aactivity level="component">
              <TSS>If keys are XORed together to form an intermediate key, the TSS section
                shall identify how this is performed (e.g., if there are ordering requirements, checks
                performed, etc.). The evaluator shall also confirm that the TSS describes how the length
                of the output produced is at least the same as that of the FEK. <h:br/><h:br/>
                 None. <h:br/><h:br/></TSS>
              <Guidance>None.<h:br/><h:br/></Guidance>
              <Tests>None.</Tests>
            </aactivity>
          </f-element>
        </f-component>
      </section>
    </sel-sfrs>
    <obj-sfrs/>
    <impl-dep-sfrs/>
  </sec:Security_Requirements>
  <appendix title="Appendix - Key Management Description">
      The documentation of the product’s encryption key management should be detailed enough
      that, after reading, the evaluator will thoroughly understand the product’s key management and
      how it meets the requirements to ensure the keys are adequately protected. This documentation
      should include an essay and diagram(s). This documentation is not required to be part of the
      TSS - it can be submitted as a separate document and marked as developer proprietary.
      <h:br/><h:br/>
      Essay:
      <h:br/><h:br/>
      The essay will provide the following information for all keys in the key chain:
      <h:br/><h:br/><h:li>The purpose of the key</h:li><h:li>If the key is stored in non-volatile memory</h:li><h:li>How and when the key is protected</h:li><h:li>How and when the key is derived</h:li><h:li>The strength of the key</h:li><h:li>When or if the key would be no longer needed, along with a justification</h:li><h:li>How and when the key may be shared</h:li><h:br/><h:br/>
      The essay will also describe the following topics:
      <h:br/><h:br/><h:li>A description of all authorization factors that are supported by the product and how
      each factor is handled, including any conditioning and combining performed.</h:li><h:li>If validation is implemented, the process for validation shall be described, noting what
      value is used for validation and the process used to perform the validation. It shall
      describe how this process ensures no keys in the key chain are weakened or exposed
      by this process.</h:li><h:li>The authorization process that leads to the decryption of the FEK(s). This section
      shall detail the key chain used by the product. It shall describe which keys are used in
      the protection of the FEK(s) and how they meet the encryption or derivation requirements including the direct chain from the initial
      authorization to the FEK(s). It shall also include any values that add into that key chain
      or interact with the key chain and the protections that ensure those values do not
      weaken or expose the overall strength of the key chain.</h:li><h:li>The diagram and essay will clearly illustrate the key hierarchy to ensure that at no
      point the chain could be broken without a cryptographic exhaust or all of the initial
      authorization values and the effective strength of the FEK(s) is maintained throughout
      the key chain.</h:li><h:li>A description of the data encryption engine, its components, and details about its
      implementation (e.g. initialization of the product, drivers, libraries (if
      applicable), logical interfaces for encryption/decryption, and how resources to be encrypted are identified.
      The description should also include the data flow from the device’s host interface to the device’s persistent media storing the data,
      information on those conditions in which the data bypasses the data encryption engine. The
      description should be detailed enough to verify all platforms ensure that when the
      user enables encryption, the product encrypts all selected resources.</h:li><h:li>The process for destroying keys when they are no longer needed by describing the
      storage location of all keys and the protection of all keys stored in non-volatile
      memory.</h:li><h:br/><h:br/>
      Diagram:
      
      <h:br/><h:br/><h:li>The diagram will include all keys from the initial authorization factor(s) to the FEK(s)
      and any keys or values that contribute into the chain. It must list the cryptographic
      strength of each key and indicate how each key along the chain is protected with
      either options from key chaining requirement. The diagram
      should indicate the input used to derive or decrypt each key in the chain.</h:li><h:li>A functional (block) diagram showing the main components (such as memories and
      processors) the initial steps needed
      for the activities the TOE performs to ensure it encrypts the targeted resources
      when a user or administrator first provisions the product.</h:li></appendix>
  <bibliography>
    <cc-entry/>
    <entry id="bibAppPP">
      <tag>AppPP</tag>
      <description><h:a href="https://www.niap-ccevs.org/protectionprofiles/516">Protection Profile for Application Software, Version 2.0, June 16, 2025</h:a></description>
    </entry>
    <entry id="FIPS140-2">
      <tag>FIPS140-2</tag>
      <description> Federal Information Processing Standard Publication (FIPS-PUB) 140-2, Security
          Requirements for Cryptographic Modules, National Institute of Standards and Technology,
          March 19, 2007 </description>
    </entry>
    <entry id="FIPS180-4">
      <tag>FIPS180-4</tag>
      <description> Federal Information Processing Standards Publication (FIPS-PUB) 180-4, Secure
          Hash Standard, March, 2012 </description>
    </entry>
    <entry id="FIPS186-5">
      <tag>FIPS186-5</tag>
      <description> Federal Information Processing Standard Publication (FIPS-PUB) 186-5, Digital
          Signature Standard (DSS), National Institute of Standards and Technology, February 2023
        </description>
    </entry>
    <entry id="FIPS197">
      <tag>FIPS197</tag>
      <description>Federal Information Processing Standards Publication (FIPS-PUB) 197,
          Specification for the Advanced Encryption Standard (AES), November 26, 2001 </description>
    </entry>
    <entry id="FIPS198-1">
      <tag>FIPS198-1</tag>
      <description>Federal Information Processing Standards Publication (FIPS-PUB) 198-1, The
          Keyed-Hash Message Authentication Code (HMAC), July 2008 </description>
    </entry>
    <entry id="SP800-38A">
      <tag>NIST800-38A</tag>
      <description>NIST Special Publication 800-38A, Recommendation for Block Cipher Modes of
          Operation: Methods and Techniques, 2001 Edition </description>
    </entry>
    <entry id="SP800-56A">
      <tag>NIST800-56A</tag>
      <description>NIST Special Publication 800-56A, Recommendation for Pair-Wise Key
          Establishment Schemes Using Discrete Logarithm Cryptography (Revised), March 2007
        </description>
    </entry>
    <entry id="SP800-56B">
      <tag>NIST800-56B</tag>
      <description>NIST Special Publication 800-56B, Recommendation for Pair-Wise Key
          Establishment Schemes Using Integer Factorization Cryptography, August 2009 </description>
    </entry>
    <entry id="SP800-90">
      <tag>NIST800-90</tag>
      <description>NIST Special Publication 800-90, Recommendation for Random Number Generation
          Using Deterministic Random Bit Generators (Revised), March 2007 </description>
    </entry>
    <entry id="SP800-132">
      <tag>NIST800-132</tag>
      <description>NIST Special Publication 800-132, Recommendation for Password-Based Key
          Derivation, December 2010 </description>
    </entry>
    <entry id="SP800-38F">
      <tag>NIST800-38F</tag>
      <description>NIST Special Publication 800-38F,Recommendation for Block Cipher Modes of
          Operation: Methods for Key Wrapping, December 2012 </description>
    </entry>
  </bibliography>
</Module>
